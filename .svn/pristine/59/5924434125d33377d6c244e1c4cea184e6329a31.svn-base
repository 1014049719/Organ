package com.talenton.organ.ui.shop;
import android.os.Bundle;
import android.text.TextUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.AdapterView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;

import com.talenton.organ.BaseListActivity;
import com.talenton.organ.R;
import com.talenton.base.dao.model.SearchCacheBean;
import com.talenton.base.server.XLTError;
import com.talenton.base.server.XLTResponseCallback;
import com.talenton.base.util.NetWorkUtils;
import com.talenton.base.widget.NoScrollGridView;
import com.talenton.organ.server.SchoolCacheServer;
import com.talenton.organ.server.ShopServer;
import com.talenton.organ.server.bean.shop.GoodsInfo;
import com.talenton.organ.server.bean.shop.RecvSearchGoodsData;
import com.talenton.organ.server.bean.shop.RecvSearchHotGoodsData;
import com.talenton.organ.server.bean.shop.SendSearchHotGoodsData;
import com.talenton.organ.ui.school.adapter.SearchHistoryAdapter;
import com.talenton.organ.ui.shop.adapter.GoodsAdapter;
import com.talenton.organ.ui.shop.adapter.GoodsSearchHotAdapter;
import com.talenton.organ.widget.SearchView;
import com.talenton.organ.widget.dialog.TipsDialog;

import java.util.ArrayList;
import java.util.List;

/**
 * Created by xiaoxiang on 2016/4/7.
 */
public class SearchGoodsActivity extends BaseListActivity implements View.OnClickListener, AdapterView.OnItemClickListener {


    private ArrayList<GoodsInfo> mGoodsDiscountInfoList;
    private SearchView search_view;
    private GoodsSearchHotAdapter hotAdapter;
    private ArrayList<String> hotList; //热门列表数据
    private NoScrollGridView gv_hot;
    private ListView lv_history;
    private TextView tv_clean;
    private LinearLayout shop_search_content;
    private ArrayList<SearchCacheBean> searchCacheBeans; //历史搜索数据
    private SearchHistoryAdapter searchHistoryAdapter;
    private TipsDialog tipsDialog;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_shop_search);

        initView();
        fillHotListData();
        fillHistroyList();



    }
    /**
     * 初始化view
     * @param
     */
    private void initView() {

       shop_search_content = (LinearLayout) findViewById(R.id.shop_search_content);
       // shop_search_hot = (LinearLayout) findViewById(R.id.shop_search_hot);
        mGoodsDiscountInfoList=new ArrayList<GoodsInfo>();
        mAdapter = new GoodsAdapter(this,mGoodsDiscountInfoList,0);
        mPullRefreshListView.getRefreshableView().setAdapter(mAdapter);
        mPullRefreshListView.setOnItemClickListener(this);
        hotList=new ArrayList<String>();
        hotAdapter = new GoodsSearchHotAdapter(this);
        gv_hot = (NoScrollGridView) findViewById(R.id.shop_gv_hot);
        gv_hot.setAdapter(hotAdapter);
        gv_hot.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                String searchTitle = hotAdapter.getItem(position);
                search_view.setSearchText(searchTitle);
                showResultView(true);
                hideSoftInput(search_view);
                startGetData(new ShopServer.ShopSearchListServer(searchTitle), new ListResponseCallback<RecvSearchGoodsData>() {
                    @Override
                    public void onSuccess(RecvSearchGoodsData data) {
                        if (data.getList().isEmpty()) {
                            showShortToast("没有符合条件的结果");
                        } else {
                            mGoodsDiscountInfoList.clear();
                            mGoodsDiscountInfoList.addAll(data.getList());
                            mAdapter.notifyDataSetChanged();
                        }
                    }

                    @Override
                    public void onError(XLTError error) {

                    }
                });
            }
        });
        search_view = (SearchView) findViewById(R.id.shop_search_view);
        search_view.setSearchHint(R.string.shop_hint_search);
        search_view.setSearchType(SearchCacheBean.TYPE_SHOP_SEARCH);
        search_view.setOnSearchCallback(new SearchView.OnSearchCallback() {
            @Override
            public void searchCallback(String searchText) {
                if (!NetWorkUtils.isNetworkAvailable(SearchGoodsActivity.this)) {
                    showShortToast(getString(R.string.main_disable_network));
                    return;
                }
                if (!searchText.isEmpty()) {

                    showResultView(true);
                    startGetData(new ShopServer.ShopSearchListServer(searchText), new ListResponseCallback<RecvSearchGoodsData>() {
                        @Override
                        public void onSuccess(RecvSearchGoodsData data) {
                            if (data.getList().isEmpty()) {
                                showShortToast("没有符合条件的结果");
                            } else {
                                mGoodsDiscountInfoList.clear();
                                mGoodsDiscountInfoList.addAll(data.getList());
                                mAdapter.notifyDataSetChanged();
                            }
                        }

                        @Override
                        public void onError(XLTError error) {

                        }
                    });
                } else {
                    showShortToast("搜索内容不能为空");
                }
            }
        });
        search_view.setOnTextChanged(new SearchView.OnTextChanged() {
            @Override
            public void textChange(CharSequence s, int start, int before, int count) {
                if (TextUtils.isEmpty(s)){
                    showResultView(false);
                }
            }
        });

        lv_history = (ListView) findViewById(R.id.shop_search_list);

    }
///////////////获取热门搜索标题
    private void fillHotListData() {
        ShopServer.getShopSearchHotGoodsData(new SendSearchHotGoodsData(), new XLTResponseCallback<RecvSearchHotGoodsData>() {

            @Override
            public void onResponse(RecvSearchHotGoodsData data, XLTError error) {
                // TODO Auto-generated method stub
                if ((error == null) && (data != null)) {
                    //获得数据，初始化哪些可能被选中

                    hotList.clear();
                    hotList.addAll(data.list);
                    hotAdapter.setData(hotList);


                } else {


                }

            }

        });
    }

    /**
     * 填充搜索历史数据
     */
    private void fillHistroyList() {
        View footerView = LayoutInflater.from(this).inflate(R.layout.item_school_search_footer,null);
        View clean_divider_line = footerView.findViewById(R.id.clean_divider_line);
        tv_clean = (TextView) footerView.findViewById(R.id.tv_clean);
        tv_clean.setOnClickListener(this);
        lv_history.addFooterView(footerView);

        List<SearchCacheBean> cacheData = SchoolCacheServer.getInstance().getSearchCache(SearchCacheBean.TYPE_SHOP_SEARCH);
        if (cacheData != null && !cacheData.isEmpty()){
            clean_divider_line.setVisibility(View.GONE);
            searchCacheBeans = (ArrayList<SearchCacheBean>) cacheData;
        }
        if (searchCacheBeans == null){
            searchCacheBeans = new ArrayList<>();
        }

        lv_history.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                SearchCacheBean searchCacheBean = searchHistoryAdapter.getItem(position);
                search_view.setSearchText(searchCacheBean.getSearchText());
                showResultView(true);
                hideSoftInput(search_view);
                startGetData(new ShopServer.ShopSearchListServer(searchCacheBean.getSearchText()), new ListResponseCallback<RecvSearchGoodsData>() {
                    @Override
                    public void onSuccess(RecvSearchGoodsData data) {
                        if (data.getList().isEmpty()) {
                            showShortToast("没有符合条件的结果");
                        } else {
                            mGoodsDiscountInfoList.clear();
                            mGoodsDiscountInfoList.addAll(data.getList());
                            mAdapter.notifyDataSetChanged();
                        }
                    }

                    @Override
                    public void onError(XLTError error) {

                    }
                });
            }
        });
        searchHistoryAdapter = new SearchHistoryAdapter(this,searchCacheBeans);
        searchHistoryAdapter.setCleanDividerLine(clean_divider_line);
        search_view.setHistroyAdapter(searchHistoryAdapter);
        lv_history.setAdapter(searchHistoryAdapter);
    }

    /**
     * 是否显示搜索结果view
     * @param isShow
     */
    public void showResultView(boolean isShow){
        if (isShow){
            shop_search_content.setVisibility(View.GONE);
            mPullRefreshListView.setVisibility(View.VISIBLE);
        }else {
            shop_search_content.setVisibility(View.VISIBLE);
            mPullRefreshListView.setVisibility(View.GONE);
        }
    }
    @Override
    protected int getTitleResourceId() {
        return R.string.shop_text_search;
    }

    @Override
    protected int getPullRefreshListViewResId() {
        return R.id.shop_search_result_list;
    }




    @Override
    public void onClick(View v) {
        switch (v.getId()){
            case R.id.tv_clean:
                //清除历史记录
                if (tipsDialog == null){
                    tipsDialog = new TipsDialog();
                    tipsDialog.setMsg(getString(R.string.dialog_clean_histroy));
                    tipsDialog.setOnClickRightBtnListener(new TipsDialog.OnClickRightBtnListener() {
                        @Override
                        public void onClick(View v) {
                            SchoolCacheServer.getInstance().clearnSearchCacheData(SearchCacheBean.TYPE_SCHOOL_SEARCH);
                            searchHistoryAdapter.clear();
                            searchHistoryAdapter.notifyDataSetChanged();
                        }
                    });
                }
                tipsDialog.show(getSupportFragmentManager(), "cleanDialog");
                break;
        }
    }

    @Override
    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
        position = position - mPullRefreshListView.getRefreshableView().getHeaderViewsCount();
        GoodsInfo mGoodsInfo = (GoodsInfo) mAdapter.getItem(position);
        GoodsDetailActivity.startGoodsDetailActivity(this, mGoodsInfo);

    }
}
