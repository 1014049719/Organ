package com.talenton.organ.ui.user;

import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.Bundle;
import android.text.TextUtils;
import android.view.View;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.google.gson.JsonObject;
import com.talenton.organ.BaseCompatActivity;
import com.talenton.organ.OrganApplication;
import com.talenton.organ.R;
import com.talenton.base.server.UserServer;
import com.talenton.base.server.XLTError;
import com.talenton.base.server.XLTResponseCallback;
import com.talenton.base.server.bean.Authority;
import com.talenton.base.server.bean.UserInfo;
import com.talenton.base.util.AppLogger;
import com.talenton.base.util.ChannelUtil;
import com.talenton.base.util.ImageLoaderManager;
import com.talenton.base.util.NetWorkUtils;
import com.talenton.base.util.Preference;
import com.talenton.base.util.SystemUtil;
import com.talenton.base.widget.CircleImageView;
import com.talenton.organ.event.UpdateAvatarEvent;
import com.talenton.organ.event.WXLoginEvent;
import com.talenton.organ.server.MineServer;
import com.talenton.organ.server.bean.user.ReqModifyUserInfo;
import com.talenton.organ.server.bean.user.UploadFile;
import com.talenton.organ.ui.shop.ManageAdressActivity;
import com.talenton.organ.util.StoragePathHelper;
import com.talenton.organ.widget.dialog.TipsDialog;
import com.talenton.organ.wxapi.LoginHelper;
import com.tencent.connect.common.Constants;
import com.tencent.tauth.Tencent;

import org.greenrobot.eventbus.EventBus;
import org.greenrobot.eventbus.Subscribe;
import org.greenrobot.eventbus.ThreadMode;
import org.json.JSONObject;

import java.io.File;

public class UserInfoActivity extends BaseCompatActivity implements View.OnClickListener {
    private final int MALE = 1;
    private final int FEMALE = 2;
    private final int REQUEST_MODIFY_NAME = 1101;
    private CircleImageView iv_avatar;
    private TextView tv_user_name;
    private LinearLayout ll_phone;
    private TextView tv_phone;
    private LinearLayout ll_pwd;
    private LinearLayout ll_wechat;
    private LinearLayout ll_QQ;
    private LinearLayout ll_address;
    private RelativeLayout rl_user_name;
    private RelativeLayout rl_avator;
    private RadioGroup rg_sex;
    private RadioButton rb_male;
    private RadioButton rb_female;
    private TextView tv_wechat;
    private TextView tv_QQ;

    private TipsDialog unBindTips;

    private static final int BIND_WX = 1;
    private static final int BIND_QQ = 2;
    private static final int UNBUIND_QQ = 3;
    private static final int UNBUIND_WX = 4;
    private static final int BIND_PHONE = 5;

    private boolean isBindQQ;
    private boolean isBindWX;
    private boolean isBindPhone;

    private final int REQUEST_BIND_PHONE = 1001;

    private  UserInfo userInfo; //当前用户信息
    private int lastGender;
    private static final int RELATION_CAPTURE_PICK = 301;
    private boolean isFirstOpen;



    public static void startUserInfoActivity(Context context){
        context.startActivity(new Intent(context, UserInfoActivity.class));
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_user_info);
        EventBus.getDefault().register(this);
        isFirstOpen = true;
        initView();
        fillData();
    }

    private void fillData() {
        if (!isLogin()){
            showShortToast("未登录,无账号信息");
            return;
        }
        userInfo = UserServer.getCurrentUser();
        tv_user_name.setText(userInfo.getRealname());
        ImageLoaderManager.getInstance().displayImage(userInfo.avartar, iv_avatar, ImageLoaderManager.createImgOptions(R.mipmap.user_photo,R.mipmap.user_photo), null, null);
        updateGender(userInfo.gender);
        if (userInfo.phone_bind == 1){
            isBindPhone = true;
            tv_phone.setText(String.format(getString(R.string.mine_text_phone_bind),userInfo.getUsername()));
        }
        if (userInfo.wxbind == 1){
            isBindWX = true;
            tv_wechat.setText(getString(R.string.mine_text_wechat_bind));
        }
        if (userInfo.qqbind == 1){
            isBindQQ = true;
            tv_QQ.setText(getString(R.string.mine_text_QQ_bind));
        }
        isFirstOpen = false;
    }

    @Override
    protected void onDestroy() {
        EventBus.getDefault().unregister(this);
        super.onDestroy();
    }


    private void updateGender(int gender){
        lastGender = gender;
        if (gender == MALE){
            rb_male.setChecked(true);
            rb_female.setChecked(false);
        }else if (gender == FEMALE){
            rb_male.setChecked(false);
            rb_female.setChecked(true);
        }
    }

    private void initView() {
        iv_avatar = (CircleImageView) findViewById(R.id.iv_avatar);
        tv_user_name = (TextView) findViewById(R.id.tv_user_name);
        ll_phone = (LinearLayout) findViewById(R.id.ll_phone);
        tv_phone = (TextView) findViewById(R.id.tv_phone);
        ll_pwd = (LinearLayout) findViewById(R.id.ll_pwd);
        ll_wechat = (LinearLayout) findViewById(R.id.ll_wechat);
        ll_QQ = (LinearLayout) findViewById(R.id.ll_QQ);
        ll_address = (LinearLayout) findViewById(R.id.ll_address);
        tv_wechat = (TextView) findViewById(R.id.tv_wechat);
        tv_QQ = (TextView) findViewById(R.id.tv_QQ);
        rl_avator = (RelativeLayout) findViewById(R.id.rl_avator);
        rl_user_name = (RelativeLayout) findViewById(R.id.rl_user_name);
        rg_sex = (RadioGroup) findViewById(R.id.rg_sex);
        rg_sex.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(RadioGroup group, int checkedId) {
                if (isFirstOpen){
                    return;
                }
                int gender = -1;
                if (checkedId == R.id.rb_male){
                    gender = MALE;
                }else if (checkedId == R.id.rb_female){
                    gender = FEMALE;
                }
                modifyGender(gender);
            }
        });
        rb_male = (RadioButton) findViewById(R.id.rb_male);
        rb_female = (RadioButton) findViewById(R.id.rb_female);

        rl_avator.setOnClickListener(this);
        ll_phone.setOnClickListener(this);
        ll_pwd.setOnClickListener(this);
        ll_wechat.setOnClickListener(this);
        ll_QQ.setOnClickListener(this);
        ll_address.setOnClickListener(this);
        rl_user_name.setOnClickListener(this);

        unBindTips = new TipsDialog();
    }

    private void modifyGender(final int gender) {
//        showProgress("正在提交数据...");
        MineServer.modifyUserInfo(new ReqModifyUserInfo(gender), new XLTResponseCallback<JSONObject>() {
            @Override
            public void onResponse(JSONObject data, XLTError error) {
                if (error == null) {
                    updateGender(gender);
                    userInfo.gender = gender;
                    updateUserInfo();
                } else {
                    updateGender(lastGender);
                    showShortToast(error.getMesssage());
                }
//                hideProgress();
            }
        });
    }

    /**
     * 更新本地用户信息
     */
    private void updateUserInfo(){
        UserServer.setRspLogin(UserServer.getRspLogin());
    }

    @Override
    public void onClick(View v) {
        if (!isLogin()){
            showShortToast("未登录,无账号信息");
            return;
        }
        switch (v.getId()){
            case R.id.rl_user_name:
                ModifyNameActivity.startModifyNameActivity(this, tv_user_name.getText().toString(), REQUEST_MODIFY_NAME);
                break;
            case R.id.rl_avator:
                //修改头像
                startActivityForResult(new Intent(this, CaptureAndPickActivity.class), RELATION_CAPTURE_PICK);
                break;
            case R.id.ll_phone:
                //修改手机号绑定
                BindPhoneActivity.startBindPhoneActivity(this, REQUEST_BIND_PHONE,isBindPhone);
                break;
            case R.id.ll_pwd:
                if (UserServer.getCurrentUser().phone_bind == 1){
                    ModifyPasswordActivity.startModifyPasswordActivity(this,userInfo.getUsername(),ModifyPasswordActivity.TYPE_MODIFY_PASSWORD);
                }else {
                    showShortToast("请先绑定手机号");
                }
                break;
            case R.id.ll_wechat:
                if (isBindWX){
                    unBindTips.setMsg("解除微信绑定后，你将不能用微信登录乐思构了");
                    unBindTips.setOnClickRightBtnListener(new TipsDialog.OnClickRightBtnListener() {
                        @Override
                        public void onClick(View v) {
                            unBindWX();
                        }
                    });
                    unBindTips.show(getSupportFragmentManager(),"unbindWX");
                }else {
                    bindWX();
                }
                break;
            case R.id.ll_QQ:
                if (isBindQQ){
                    unBindTips.setMsg("解除QQ绑定后，你将不能用QQ登录乐思构了");
                    unBindTips.setOnClickRightBtnListener(new TipsDialog.OnClickRightBtnListener() {
                        @Override
                        public void onClick(View v) {
                            unBindQQ();
                        }
                    });
                    unBindTips.show(getSupportFragmentManager(), "unbindQQ");
                }else {
                    bindQQ();
                }
                break;
            case R.id.ll_address:
                ManageAdressActivity.startManageAdressActivityFromMine(this);
                break;
        }
    }

    @Override
    protected int getTitleResourceId() {
        return R.string.user_info_title;
    }


    @Subscribe(threadMode = ThreadMode.MAIN)
    public void onEventMainThread(WXLoginEvent event) {
        if (event == null)
            return;
        if ((event.ret) && (event.authtype == Authority.TYPE_WEIXIN)) {
            try {
                // 无论是否获得头像昵称，都可以继续登录
                JsonObject jo = new JsonObject();
                jo.addProperty("authtype", BIND_WX);
                jo.addProperty("openid", event.openid);
                jo.addProperty("nickname", event.nickname);
                jo.addProperty("avartarurl", event.figureurl);
                jo.addProperty("access_token", event.access_token);
                jo.addProperty("mobile", UserServer.getCurrentUser().username);
                jo.addProperty("appver", SystemUtil.getVersionName());
                jo.addProperty("ostype", "android");
                jo.addProperty("osver", android.os.Build.VERSION.RELEASE);
                jo.addProperty("phonetype", android.os.Build.MODEL);
                jo.addProperty("appid", UserServer.ANDROID_APP_ID);
                jo.addProperty("appname", OrganApplication.getInstance().getApplicationInfo().loadLabel(OrganApplication.getAppContext().getPackageManager()).toString());// "宝宝圈";
                jo.addProperty("token", Preference.getInstance().getToken(OrganApplication.getAppContext()));
                jo.addProperty("network", NetWorkUtils.getNetworkTypeName(this));
                jo.addProperty("appsource", ChannelUtil.getChannel());// AppConfig.CHANNEL_NAME;
                if (isBindWX){
                    unBindWX();
                }else {
                    showProgress("正在绑定微信中...");
                    UserServer.WXBind(jo.toString(), new XLTResponseCallback<String>() {
                        @Override
                        public void onResponse(String data, XLTError error) {
                            if (error == null) {
                                isBindWX = true;
                                hideProgress();
                                UserServer.sRspLogin.getUserInfo().wxbind = 1;
                                UserServer.setRspLogin(UserServer.sRspLogin);
                                updateViews(BIND_WX);
                            } else {
                                hideProgress();
                                showShortToast(error.getMesssage());
                            }
                        }
                    });
                }

            } catch (Exception e) {
                e.printStackTrace();
                showShortToast(event.error);
            }

        } else if (event.error != null && !TextUtils.isEmpty(event.error)) {
            showShortToast(event.error);
        }
    }

    private void updateViews(int bindType) {
        switch (bindType){
            case BIND_QQ:
                tv_QQ.setText(getString(R.string.mine_text_QQ_bind));
                break;
            case BIND_WX:
                tv_wechat.setText(getString(R.string.mine_text_wechat_bind));
                break;
            case BIND_PHONE:
                tv_phone.setText(String.format(getString(R.string.mine_text_phone_bind),UserServer.sRspLogin.member.username));
                break;
            case UNBUIND_QQ:
                tv_QQ.setText(getString(R.string.mine_text_unbound));
                break;
            case UNBUIND_WX:
                tv_wechat.setText(getString(R.string.mine_text_unbound));
                break;
        }
    }

    private void bindQQ(){
        LoginHelper.getInstance(this, LoginHelper.ONLY_LOGIN_QQ).login(new XLTResponseCallback<Boolean>() {

            @Override
            public void onResponse(Boolean data, XLTError error) {
                if (data) {
                    showProgress("正在绑定QQ...");
                    UserServer.QQBind(error.getMesssage(), new XLTResponseCallback<String>() {
                        @Override
                        public void onResponse(String data, XLTError error) {
                            if (error == null) {
                                hideProgress();
                                userInfo.qqbind = 1;
                                updateUserInfo();
                                isBindQQ = true;
                                updateViews(BIND_QQ);
                            } else {
                                hideProgress();
                                showShortToast(error.getMesssage());
                            }

                        }
                    });
                } else if (error != null && !TextUtils.isEmpty(error.getMesssage())) {
                    showShortToast(error.getMesssage());
                }

            }
        });
    }

    private void unBindQQ(){
        if (!existBind(UNBUIND_QQ)){
            showShortToast("唯一绑定账号无法解除绑定");
            return;
        }
        showProgress("正在解除QQ绑定...");
        UserServer.unBind(BIND_QQ, new XLTResponseCallback<String>() {
            @Override
            public void onResponse(String data, XLTError error) {
                if (error == null) {
                    hideProgress();
                    userInfo.qqbind = 0;
                    updateUserInfo();
                    isBindQQ = false;
                    updateViews(UNBUIND_QQ);
                } else {
                    hideProgress();
                    showShortToast(error.getMesssage());
                }

            }
        });
    }

    private void unBindWX(){
        if (!existBind(UNBUIND_WX)){
            showShortToast("唯一绑定账号无法解除绑定");
            return;
        }
        showProgress("正在解除微信绑定...");
        UserServer.unBind(BIND_WX, new XLTResponseCallback<String>() {
            @Override
            public void onResponse(String data, XLTError error) {
                if (error == null) {
                    hideProgress();
                    userInfo.wxbind = 0;
                    updateUserInfo();
                    isBindWX = false;
                    updateViews(UNBUIND_WX);
                } else {
                    hideProgress();
                    Toast.makeText(getApplicationContext(), error.getMesssage(), Toast.LENGTH_LONG).show();
                }
                hideProgress();
            }
        });
    }

    private void bindWX(){
        //微信绑定走eventbug不走这里的回掉
        LoginHelper.getInstance(this, LoginHelper.ONLY_LOGIN_WEIXIN).login(new XLTResponseCallback<Boolean>() {
            @Override
            public void onResponse(Boolean data, XLTError error) {

            }
        });
    }

    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        if (requestCode == Constants.REQUEST_LOGIN || requestCode == Constants.REQUEST_APPBAR) {
            Tencent.onActivityResultData(requestCode, resultCode, data, LoginHelper.getInstance(this, LoginHelper.ONLY_LOGIN_QQ).getListener());
        }else if(requestCode == REQUEST_BIND_PHONE && resultCode == RESULT_OK){
            if (data != null){
                boolean isSkip = data.getBooleanExtra(BindPhoneActivity.IS_SKIP,false);
                if (isSkip){
                    return;
                }
            }
            userInfo.phone_bind = 1;
            userInfo.username = UserServer.sRspLogin.member.username;
            updateUserInfo();
            updateViews(BIND_PHONE);
        }else if (requestCode == REQUEST_MODIFY_NAME && resultCode == RESULT_OK){
            String name = data.getStringExtra(ModifyNameActivity.NAME);
            if (name != null){
                tv_user_name.setText(name);
            }
        }else if(requestCode == RELATION_CAPTURE_PICK && resultCode == RESULT_OK){
            uploadAvatar();
        }
    }

    /**
     * 上传头像
     */
    private void uploadAvatar() {
        final File file = StoragePathHelper.getUploadFile();
        if(file.exists() && file.length() > 0){
            showProgress("上传头像中...");
            MineServer.uploadFile(UserServer.getCurrentUser().uid, file, new XLTResponseCallback<UploadFile>() {
                @Override
                public void onResponse(UploadFile data, XLTError error) {
                    if (error == null) {
                        String uri = "file:///" + file.getAbsolutePath();
                        AppLogger.d("img==>" + uri);
                        UserServer.getCurrentUser().avartar = uri;
                        Bitmap bitmap =  BitmapFactory.decodeFile(file.getAbsolutePath());
                        if (bitmap != null){
                            UserServer.setRspLogin(UserServer.getRspLogin()); //更改缓存中的头像地址
                            iv_avatar.setImageBitmap(bitmap);
                            EventBus.getDefault().post(new UpdateAvatarEvent(file.getAbsolutePath()));
                        }
                    }else {
                        showShortToast(error.getMesssage());
                    }
                    hideProgress();
                }
            });

        }
    }


    /**
     * 是否存在绑定
     * @param type 当前需要解绑的类型
     * @return
     */
    private boolean existBind(int type){
        if (userInfo.phone_bind == 1){
            return true;
        }
        if (type == UNBUIND_QQ){
            if (userInfo.wxbind == 1){
                return true;
            }
            return false;
        }
        if (type == UNBUIND_WX){
            if (userInfo.qqbind == 1){
                return true;
            }
            return false;
        }
        return false;
    }

}
