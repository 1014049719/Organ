package com.talenton.organ.ui.feed;

import android.content.Context;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ListView;

import com.handmark.pulltorefresh.library.PullToRefreshBase;
import com.handmark.pulltorefresh.library.PullToRefreshListView;
import com.talenton.base.server.bean.AppData;
import com.talenton.organ.BaseCompatFragment;
import com.talenton.organ.R;
import com.talenton.base.server.UserServer;
import com.talenton.base.server.XLTError;
import com.talenton.base.server.XLTResponseCallback;
import com.talenton.base.widget.LoadingViewHolder;
import com.talenton.organ.event.AttentionAgeEvent;
import com.talenton.organ.event.LoginEvent;
import com.talenton.organ.event.ModifyCircleEvent;
import com.talenton.organ.server.FeedServer;
import com.talenton.organ.server.bean.feed.CircleListData;
import com.talenton.organ.server.bean.feed.MineCircle;
import com.talenton.organ.server.bean.feed.PostToParam;
import com.talenton.organ.server.bean.feed.RspMineCircle;
import com.talenton.organ.ui.feed.adapter.CircleHomeAdapter;
import com.talenton.organ.util.AppManager;

import org.greenrobot.eventbus.EventBus;
import org.greenrobot.eventbus.Subscribe;
import org.greenrobot.eventbus.ThreadMode;


/**
 * Created by ttt on 2016/4/1.
 */
public class CircleFragment extends BaseCompatFragment implements View.OnClickListener, AdapterView.OnItemClickListener {

    private PullToRefreshListView mPullRefreshListView;
    private ListView mListView;
    private LoadingViewHolder mLoading;

    private CircleHomeAdapter mAdapter;

    @Override
    public void onAttach(Context context) {
        // TODO Auto-generated method stub
        super.onAttach(context);
        if (context instanceof View.OnClickListener) {

        } else {

        }
    }

    static public CircleFragment newInstance() {
        CircleFragment f = new CircleFragment();
        f.isLazyMode = true;
        return f;
    }

    public CircleFragment(){

    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        // TODO Auto-generated method stub
        super.onCreate(savedInstanceState);
        EventBus.getDefault().register(this);
    }

    @Subscribe(threadMode = ThreadMode.MAIN)
    public void onEventMainThread(AttentionAgeEvent event){
        if (event == null || !event.isAttention || mPullRefreshListView == null) return;
        mPullRefreshListView.setRefreshing(true);
    }

    @Subscribe(threadMode = ThreadMode.MAIN)
    public void onEventMainThread(ModifyCircleEvent event){
        if (event == null || mAdapter == null) return;
        mAdapter.updateData(event);
    }

    @Subscribe(threadMode = ThreadMode.MAIN)
    public void onEventMainThread(LoginEvent event){
        if (event == null) return;
        loadData();
    }

    @Override
    public void onDestroy() {
        // TODO Auto-generated method stub
        super.onDestroy();
        EventBus.getDefault().unregister(this);
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        // image_detail_fragment.xml contains just an ImageView
        super.onCreateView(inflater, container, savedInstanceState);
        View v = inflater.inflate(R.layout.fragment_circle, container, false);

        mPullRefreshListView = (PullToRefreshListView) v.findViewById(R.id.pull_refresh_list);
        mPullRefreshListView.setMode(PullToRefreshBase.Mode.PULL_FROM_START);
        mPullRefreshListView.setOnRefreshListener(new PullToRefreshBase.OnRefreshListener2() {

            @Override
            public void onPullDownToRefresh(PullToRefreshBase refreshView) {
                RefreshData();
            }

            @Override
            public void onPullUpToRefresh(PullToRefreshBase refreshView) {
            }

        });
        mListView = mPullRefreshListView.getRefreshableView();

        mAdapter = new CircleHomeAdapter(getActivity());
        mListView.setAdapter(mAdapter);

        View loading = v.findViewById(R.id.loading_container);
        mLoading = new LoadingViewHolder(mPullRefreshListView, loading, this, this);
        mListView.setOnItemClickListener(this);
        return v;
    }

    @Override
    public void onActivityCreated(Bundle savedInstanceState) {
        // TODO Auto-generated method stub
        super.onActivityCreated(savedInstanceState);
        if(AppManager.getInstance().hasModel(AppManager.Model.FEED))
            loadData();
    }

    private void loadData(){
        mLoading.showView(LoadingViewHolder.VIEW_TYPE_LOADING);
        AppData app = UserServer.getRspLogin().app_cur;
        final long appid = app != null ? app.appboxid : 0;
        FeedServer.getMineCircle(appid, 0, MineCircle.ATTENTION_TYPE_EMPTY, new XLTResponseCallback<RspMineCircle>() {

            @Override
            public void onResponse(RspMineCircle data, XLTError error) {
                if (error == null && data != null && data.list != null && data.list.size() > 0) {
                    initData(data);
                    mLoading.showView(LoadingViewHolder.VIEW_TYPE_DATA);
                } else if (error != null) {
                    mLoading.showView(LoadingViewHolder.VIEW_TYPE_NO_NOTWORK);
                } else {
                    mLoading.showView(LoadingViewHolder.VIEW_TYPE_NO_DATA);
                }
            }
        });
    }

    private void RefreshData(){
        AppData app = UserServer.getRspLogin().app_cur;
        final long appid = app != null ? app.appboxid : 0;
        FeedServer.getMineCircle(appid, 0, MineCircle.ATTENTION_TYPE_EMPTY, new XLTResponseCallback<RspMineCircle>() {

            @Override
            public void onResponse(RspMineCircle data, XLTError error) {
                mPullRefreshListView.postDelayed(new Runnable() {
                    @Override
                    public void run() {
                        mPullRefreshListView.onRefreshComplete();
                    }
                }, 1000);
                if (error == null && data != null) {
                    initData(data);
                } else if (error != null) {
                } else {
                }
            }
        });
    }

    @Override
    protected int getTitleResourceId() {
        return R.string.main_menu_feed;
    }

    @Override
    protected int getLeftImageResourceId() {
        return 0;
    }


    @Override
    public void onClick(View v) {
        switch (v.getId()){
            case R.id.btn_reload:
            case R.id.empty_action:
                loadData();
                break;
        }
    }

    @Override
    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
        MineCircle circle = (MineCircle)parent.getAdapter().getItem(position);
        if (circle == null || circle.circle_id == 0) return;
        PostToParam param = new PostToParam(CircleListData.CIRCLE_TYPE_BABY, circle.circle_id, circle.getCircleListData().circle_name);
        param.circleType = circle.getCircleListData().circle_type;
        param.attentionType = circle.attention_type;
        if (param.circleType == CircleListData.CIRCLE_TYPE_BABY){
            BabyFeedsActivity.startBabyFeedsActivity(getActivity(), param);
        }
        else {
            CircleFeedsActivity.startCircleFeedsActivity(getActivity(), param);
        }
    }

    private void initData(RspMineCircle data){
        if(data.list == null || data.list.size() == 0) return;
        mAdapter.addDatas(data.list);
    }
}
