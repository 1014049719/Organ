package com.talenton.organ.ui.feed;

import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.support.v4.content.ContextCompat;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.TextView;

import com.nostra13.universalimageloader.core.ImageLoader;
import com.talenton.organ.BaseCompatActivity;
import com.talenton.organ.R;
import com.talenton.base.server.task.TaskBase;
import com.talenton.base.server.task.TaskManager;
import com.talenton.base.util.ImageLoaderManager;
import com.talenton.base.widget.LoadingViewHolder;
import com.talenton.organ.event.FeedsTaskEvent;
import com.talenton.organ.server.FeedServer;
import com.talenton.organ.server.bean.feed.CircleListData;
import com.talenton.organ.server.bean.feed.Feeds;
import com.talenton.organ.server.bean.feed.MediaBean;
import com.talenton.organ.server.bean.feed.PostToParam;
import com.talenton.organ.server.task.TaskFeeds;
import com.talenton.organ.util.CacheManager;

import org.greenrobot.eventbus.EventBus;
import org.greenrobot.eventbus.Subscribe;
import org.greenrobot.eventbus.ThreadMode;

import java.util.ArrayList;
import java.util.LinkedList;


public class FeedsTaskActivity extends BaseCompatActivity implements OnItemClickListener, View.OnClickListener {
	private ListView mList;
	private TaskAdapter mAdapter;
	private LoadingViewHolder mLoading;
	private String opPending[] = new String[] { "查看", "取消上传" };
	private String opFailed[] = new String[] { "查看", "重发", "取消上传" };
	private String opSuccess[] = new String[] { "查看", "删除记录" };
	private Handler mHandler = new Handler();
	private PostToParam mPostToParam;

	public static void startFeedsTaskActivity(Context context, PostToParam postToParam) {
		Intent intent = new Intent(context, FeedsTaskActivity.class);
		intent.putExtra("key_post_to", postToParam);
		context.startActivity(intent);
	}

	protected void onCreate(Bundle savedInstanceState) {
		setContentView(R.layout.activity_feeds_task);
		super.onCreate(savedInstanceState);
		Intent intent = getIntent();
		if (intent != null) {
			mPostToParam = (PostToParam) intent.getParcelableExtra("key_post_to");
		}
		if(mPostToParam == null){
			mPostToParam = new PostToParam(0, 0, "");
		}
		initView();
		loadData();
		EventBus.getDefault().register(this);
	}

	@Override
	public void onDestroy() {
		// TODO Auto-generated method stub
		EventBus.getDefault().unregister(this);
		if(mHandler != null)
			mHandler.removeCallbacks(mRunnable);
		super.onDestroy();
	}

	@Subscribe(threadMode = ThreadMode.MAIN)
	public void onEventMainThread(FeedsTaskEvent event) {
		if (mAdapter != null && event != null) {
			loadData();
		}
	}

	private void initView() {
		mList = (ListView) findViewById(R.id.list);
		mAdapter = new TaskAdapter(this);
		mList.setAdapter(mAdapter);
		mList.setOnItemClickListener(this);
		View loading = findViewById(R.id.loading_container);
		mLoading = new LoadingViewHolder(mList, loading, this, this);
	}

	private void loadData() {
		if (mAdapter.getCount() == 0) {
			mLoading.showView(LoadingViewHolder.VIEW_TYPE_LOADING);
		}
		LinkedList<Feeds> feeds = FeedServer.listAllFeedsTask();
		if (feeds != null && !feeds.isEmpty()) {
			mLoading.showView(LoadingViewHolder.VIEW_TYPE_DATA);
			mAdapter.setData(feeds);
		} else {
			mLoading.showView(LoadingViewHolder.VIEW_TYPE_NO_DATA);
		}
	}

	@Override
	protected int getTitleResourceId() {
		// TODO Auto-generated method stub
		return R.string.post_history;
	}
	
	Runnable mRunnable = new Runnable(){
		@Override
		public void run() {
			if(mAdapter != null && mAdapter.getCount() > 0){
				mAdapter.notifyDataSetChanged();
			}
		}
	};

	private class TaskAdapter extends BaseAdapter {
		private LayoutInflater mInflater;
		private LinkedList<Feeds> mData;
		private int mColorSuccess, mColorFailed, mColorProgress;
		private String progress;
		int height = 100;

		public TaskAdapter(Context context) {
			mInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
			mColorProgress = ContextCompat.getColor(context, R.color.text_sub);
			mColorFailed = ContextCompat.getColor(context, R.color.red);
			mColorSuccess = ContextCompat.getColor(context, R.color.text_green);
			progress = context.getResources().getText(R.string.post_progress).toString();
			mData = new LinkedList<Feeds>();
			height = context.getResources().getDimensionPixelSize(R.dimen.height_50);
		}

		public int getCount() {
			return mData.size();
		}

		public void setData(LinkedList<Feeds> paths) {
			mData.clear();
			mData.addAll(paths);
			notifyDataSetChanged();
		}

		public Feeds getItem(int position) {
			return mData.get(position);
		}

		public long getItemId(int position) {
			return position;
		}

		public View getView(int position, View convertView, ViewGroup parent) {
			// TODO Auto-generated method stub
			ViewHolder holder = null;
			if (convertView == null) {
				holder = new ViewHolder();
				convertView = mInflater.inflate(R.layout.item_feeds_task, parent, false);
				holder.logo = (ImageView) convertView.findViewById(R.id.logo);
				holder.content = (TextView) convertView.findViewById(R.id.content);
				holder.progress = (TextView) convertView.findViewById(R.id.progress);
				holder.upprogress = (ProgressBar) convertView.findViewById(R.id.upprogress);
				convertView.setTag(holder);
			} else {
				holder = (ViewHolder) convertView.getTag();
			}
			Feeds item = getItem(position);
			String strProgress = progress;
			if (item.attachinfo != null && item.attachinfo.size() > 0) {
				int count = 1;
				for(MediaBean mb : item.attachinfo){
					if(mb.remote == MediaBean.ADDR_QINIU){
						count++;
					}
				}
				if(count > item.attachinfo.size()) count = item.attachinfo.size();
				holder.logo.setVisibility(View.VISIBLE);
				if(position == 0){
					int nProgress = CacheManager.getInstance().getQnUpProgress();
					if(nProgress >= 100){
						mHandler.removeCallbacks(mRunnable);
						CacheManager.getInstance().setQnUpProgress(0);
						holder.upprogress.setVisibility(View.GONE);
					}else if(item.taskStatus == TaskBase.STATUS_PENDING){
						mHandler.postDelayed(mRunnable, 1000);
						if(!item.isVideo())
							strProgress = String.format("%s(%d/%d)",  progress, count, item.attachinfo.size());
						holder.upprogress.setVisibility(View.VISIBLE);
					}
					holder.upprogress.setProgress(nProgress);
					
				}else{
					holder.upprogress.setVisibility(View.GONE);
				}
				ImageLoader.getInstance().displayImage(item.attachinfo.get(0).genUrl(height, height), holder.logo,
						ImageLoaderManager.DEFAULT_IMAGE_DISPLAYER_500);
			} else {
				holder.logo.setVisibility(View.GONE);
			}
			holder.content.setText(item.content);
			if (item.taskStatus == TaskBase.STATUS_SUCCESS) {
				holder.progress.setText(R.string.post_success);
				holder.progress.setTextColor(mColorSuccess);
			} else if (item.taskStatus == TaskBase.STATUS_FAILED) {
				holder.progress.setText(R.string.post_failed);
				holder.progress.setTextColor(mColorFailed);
			} else if(item.taskStatus == TaskBase.STATUS_PENDING) {
				holder.progress.setText(strProgress);
				holder.progress.setTextColor(mColorProgress);
			}else{
				holder.progress.setText(R.string.post_waiting);
				holder.progress.setTextColor(mColorProgress);
			}
			Log.d("tag", ""+item.taskStatus);
			return convertView;
		}

	}

	static class ViewHolder {
		ImageView logo;
		TextView content;
		TextView progress;
		ProgressBar upprogress;
	}

	@Override
	public void onItemClick(AdapterView<?> arg0, View arg1, int arg2, long arg3) {
		final Feeds item = mAdapter.getItem(arg2);
		if (item.taskStatus == TaskBase.STATUS_SUCCESS) {
			AlertDialog.Builder builder = new AlertDialog.Builder(this);
			builder.setTitle("操作");
			builder.setItems(opSuccess, new DialogInterface.OnClickListener() {
				@Override

				public void onClick(DialogInterface dialog, int which) {
					switch (which) {
					case 0:
						mPostToParam.tid = item.tid;
						mPostToParam.guid = item.guid;
						mPostToParam.count = item.browsecount;
						if (item.circle_type == CircleListData.CIRCLE_TYPE_BABY) {
							FeedsDetailActivity.startFeedsDetailActivity(FeedsTaskActivity.this, mPostToParam);
						}else {
							CircleFeedsDetailActivity.startCircleFeedsDetailActivity(FeedsTaskActivity.this, mPostToParam);
						}
						break;
					case 1:
						TaskManager.deleteTaskFromDB(item.appLocalid);
						loadData();
						break;
					}
				}

			});
			AlertDialog dialog = builder.create();
			dialog.setCanceledOnTouchOutside(true);
			dialog.show();

		} else if (item.taskStatus == TaskBase.STATUS_FAILED) {
			AlertDialog.Builder builder = new AlertDialog.Builder(this);
			builder.setTitle("操作");
			builder.setItems(opFailed, new DialogInterface.OnClickListener() {
				@Override

				public void onClick(DialogInterface dialog, int which) {
					switch (which) {
					case 0:
						if (item.circle_type == CircleListData.CIRCLE_TYPE_BABY) {
							FeedsDetailActivity.startFeedsTaskActivity(FeedsTaskActivity.this, item.appLocalid);
						}else {
							CircleFeedsDetailActivity.startCircleFeedsDetailActivity(FeedsTaskActivity.this, item.appLocalid);
						}
						break;
					case 1:

						FeedServer.rePostFeeds(item);
						break;
					case 2:
						TaskFeeds task = (TaskFeeds) TaskManager.getTaskFromDB(item.appLocalid);
						if (task != null) {
							task.onFinish(TaskBase.STATUS_CANCELED, "");
						}
						break;
					}
				}

			});
			AlertDialog dialog = builder.create();
			dialog.setCanceledOnTouchOutside(true);
			dialog.show();
		} else {
			AlertDialog.Builder builder = new AlertDialog.Builder(this);
			builder.setTitle("操作");
			builder.setItems(opPending, new DialogInterface.OnClickListener() {
				@Override

				public void onClick(DialogInterface dialog, int which) {
					switch (which) {
					case 0:
						if (item.circle_type == CircleListData.CIRCLE_TYPE_BABY) {
							FeedsDetailActivity.startFeedsTaskActivity(FeedsTaskActivity.this, item.appLocalid);
						}else {
							CircleFeedsDetailActivity.startCircleFeedsDetailActivity(FeedsTaskActivity.this, item.appLocalid);
						}
						break;
					case 1:
						TaskFeeds task = (TaskFeeds) TaskManager.getTaskFromDB(item.appLocalid);
						if (task != null) {
							task.onFinish(TaskBase.STATUS_CANCELED, "");
						}
						break;
					}
				}

			});
			AlertDialog dialog = builder.create();
			dialog.setCanceledOnTouchOutside(true);
			dialog.show();
		}
	}

	@Override
	public void onClick(View v) {
		int id = v.getId();
		if (id ==  R.id.btn_reload || id == R.id.empty_action) {
			loadData();
		}

	}

}