package com.talenton.organ.ui.feed;

import android.content.Context;
import android.content.Intent;
import android.graphics.Color;
import android.os.Bundle;
import android.text.TextUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;

import com.handmark.pulltorefresh.library.PullToRefreshBase;
import com.handmark.pulltorefresh.library.PullToRefreshListView;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.talenton.organ.BaseCompatActivity;
import com.talenton.organ.R;
import com.talenton.base.server.XLTError;
import com.talenton.base.server.XLTResponseCallback;
import com.talenton.base.server.bean.ObjectCode;
import com.talenton.base.util.DateUtil;
import com.talenton.base.util.ImageLoaderManager;
import com.talenton.base.util.XLTToast;
import com.talenton.base.widget.LoadingViewHolder;
import com.talenton.organ.server.FeedServer;
import com.talenton.organ.server.bean.feed.AttentionRecordData;
import com.talenton.organ.server.bean.feed.RspAttentionRecord;

import java.util.LinkedList;

public class AttentionRecordActivity extends BaseCompatActivity implements View.OnClickListener {

    public static void startAttentionRecordActivity(Context context, long circleId){
        Intent intent = new Intent(context, AttentionRecordActivity.class);
        intent.putExtra("circleId", circleId);
        context.startActivity(intent);
    }

    private PullToRefreshListView mPullRefreshListView;
    private ListView mListView;
    private LoadingViewHolder mLoading;
    private PagerAdapter mAdapter;
    private LinkedList<AttentionRecordData> mDatas = new LinkedList<AttentionRecordData>();
    long circleId;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_attention_record);

        circleId = this.getIntent().getLongExtra("circleId", 0L);

        mPullRefreshListView = (PullToRefreshListView) findViewById(R.id.pull_refresh_list);
        mPullRefreshListView.setMode(PullToRefreshBase.Mode.PULL_FROM_START);
        mPullRefreshListView.setOnRefreshListener(new PullToRefreshBase.OnRefreshListener2() {

            @Override
            public void onPullDownToRefresh(PullToRefreshBase refreshView) {
                RefreshData();
            }

            @Override
            public void onPullUpToRefresh(PullToRefreshBase refreshView) {
            }

        });
        mListView = mPullRefreshListView.getRefreshableView();

        mAdapter = new PagerAdapter(this, this);
        mListView.setAdapter(mAdapter);

        View loading = findViewById(R.id.loading_container);
        mLoading = new LoadingViewHolder(mPullRefreshListView, loading, this, this);
    }

    @Override
    protected void onPostCreate(Bundle savedInstanceState) {
        super.onPostCreate(savedInstanceState);

        // Trigger the initial hide() shortly after the activity has been
        // created, to briefly hint to the user that UI controls
        // are available.
        loadData();
    }

    private void loadData(){
        mLoading.showView(LoadingViewHolder.VIEW_TYPE_LOADING);
        FeedServer.getAttentionRecord(circleId, AttentionRecordData.ATTENTION_STATUS_EMPTY,
                new XLTResponseCallback<RspAttentionRecord>() {
                    @Override
                    public void onResponse(RspAttentionRecord data, XLTError error) {
                        if (error == null && data != null && data.list != null && data.list.size() > 0) {
                            initData(data);
                            mLoading.showView(LoadingViewHolder.VIEW_TYPE_DATA);
                        } else if (error != null) {
                            mLoading.showView(LoadingViewHolder.VIEW_TYPE_NO_NOTWORK);
                        } else {
                            mLoading.showView(LoadingViewHolder.VIEW_TYPE_NO_DATA);
                            mLoading.setEmptyImage(R.mipmap.volume);
                            mLoading.setEmptyText(R.string.circle_family_hint);
                        }
                    }
                });
    }

    private void RefreshData(){
        FeedServer.getAttentionRecord(circleId, AttentionRecordData.ATTENTION_STATUS_EMPTY,
                new XLTResponseCallback<RspAttentionRecord>() {
                    @Override
                    public void onResponse(RspAttentionRecord data, XLTError error) {
                        mPullRefreshListView.postDelayed(new Runnable() {
                            @Override
                            public void run() {
                                mPullRefreshListView.onRefreshComplete();
                            }
                        }, 1000);
                        if (error == null && data != null) {
                            initData(data);
                        }
                    }
                });
    }

    private void initData(RspAttentionRecord data){
        if(data.list == null || data.list.size() == 0) return;
        mDatas.clear();
        mDatas.addAll(data.list);
        mAdapter.notifyDataSetChanged();
    }

    @Override
    protected int getTitleResourceId() {
        return R.string.circle_title_new_family;
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()){
            case R.id.tv_apply:
                applyAttenton( (long)v.getTag(), AttentionRecordData.ATTENTION_STATUS_AGREE);
                break;
            case R.id.tv_refuse:
                applyAttenton( (long)v.getTag(), AttentionRecordData.ATTENTION_STATUS_REFUSE);
                break;
            case R.id.btn_reload:
            case R.id.empty_action:
                loadData();
                break;
        }
    }

    private void applyAttenton(final long attentionId, final int status){
        showProgress(R.string.main_processing, true);
        FeedServer.applyAttentionRecord(attentionId, status, new XLTResponseCallback<ObjectCode>() {
            @Override
            public void onResponse(ObjectCode data, XLTError error) {
                hideProgress();
                if (error == null){
                    if (mDatas != null){
                        for (AttentionRecordData d : mDatas){
                            if (d.attention_id == attentionId){
                                d.attent_status = status;
                                mAdapter.notifyDataSetChanged();
                                break;
                            }
                        }
                    }
                }else{
                    if (TextUtils.isEmpty(error.getMesssage())){
                        XLTToast.makeText(AttentionRecordActivity.this, R.string.main_request_fail).show();
                    }else{
                        XLTToast.makeText(AttentionRecordActivity.this, error.getMesssage()).show();
                    }

                }
            }
        });
    }

    private class PagerAdapter extends BaseAdapter{

        LayoutInflater mInflater;
        View.OnClickListener mListener;
        Context mContext;

        public PagerAdapter(Context context, View.OnClickListener listener){
            mInflater = LayoutInflater.from(context);
            mContext = context;
            mListener = listener;
        }

        @Override
        public int getCount() {
            return mDatas.size();
        }

        @Override
        public AttentionRecordData getItem(int position) {
            return mDatas.get(position);
        }

        @Override
        public long getItemId(int position) {
            return position;
        }

        @Override
        public View getView(int position, View convertView, ViewGroup parent) {
            HolderView holder;
            if (convertView == null){
                holder = new HolderView();
                convertView = mInflater.inflate(R.layout.item_feed_attention_record, parent, false);
                holder.mPhoto = (ImageView) convertView.findViewById(R.id.circle_photo);
                holder.mCircleName = (TextView) convertView.findViewById(R.id.tv_circle_name);
                holder.mTime = (TextView) convertView.findViewById(R.id.time);
                holder.mCircleDescription = (TextView) convertView.findViewById(R.id.tv_circle_description);
                holder.mShowStatus = (TextView) convertView.findViewById(R.id.tv_show_status);
                holder.mApply = (TextView) convertView.findViewById(R.id.tv_apply);
                holder.mRefuse = (TextView) convertView.findViewById(R.id.tv_refuse);
                holder.mApply.setOnClickListener(mListener);
                holder.mRefuse.setOnClickListener(mListener);
                convertView.setTag(holder);
            }else{
                holder = (HolderView)convertView.getTag();
            }
            AttentionRecordData data = getItem(position);
            holder.mApply.setTag(data.attention_id);
            holder.mTime.setText(DateUtil.parseTime(data.create_time));
            holder.mRefuse.setTag(data.attention_id);
            String relname = TextUtils.isEmpty(data.getCircleMember().realname) ? "" : data.getCircleMember().realname;
            ImageLoader.getInstance().displayImage(data.getCircleMember().avatar, holder.mPhoto, ImageLoaderManager.DEFAULT_USER_IMAGE_DISPLAYER);
            holder.mCircleName.setText(relname);

            if (data.attent_status == AttentionRecordData.ATTENTION_STATUS_APPLY){
                holder.mShowStatus.setVisibility(View.GONE);
                holder.mRefuse.setVisibility(View.VISIBLE);
                holder.mApply.setVisibility(View.VISIBLE);

            }else if(data.attent_status == AttentionRecordData.ATTENTION_STATUS_REFUSE){
                holder.mShowStatus.setText("已拒绝");
                //holder.mShowStatus.setTextColor(Color.parseColor("#ABA7A2"));
                holder.mShowStatus.setVisibility(View.VISIBLE);
                holder.mRefuse.setVisibility(View.GONE);
                holder.mApply.setVisibility(View.GONE);
            }else if(data.attent_status == AttentionRecordData.ATTENTION_STATUS_AGREE){
                holder.mShowStatus.setText("已同意");
                //holder.mShowStatus.setTextColor(Color.parseColor("#00BE65"));
                holder.mShowStatus.setVisibility(View.VISIBLE);
                holder.mRefuse.setVisibility(View.GONE);
                holder.mApply.setVisibility(View.GONE);
            }

            switch (data.attent_sources){
                case 0:
                    holder.mCircleDescription.setText("通过邀请码关注了您的宝宝圈");
                    holder.mShowStatus.setVisibility(View.GONE);
                    holder.mRefuse.setVisibility(View.GONE);
                    holder.mApply.setVisibility(View.GONE);
                    break;
                case 1:
                    holder.mCircleDescription.setText("来自同一所学校");
                    break;
                case 2:
                    holder.mCircleDescription.setText("通过手机号码请求关注您的宝宝圈");
                    break;
            }

            return convertView;
        }
    }

    private class HolderView{
        public TextView mCircleName, mCircleDescription, mShowStatus, mApply, mRefuse;
        public TextView mTime;
        public ImageView mPhoto;
    }
}
