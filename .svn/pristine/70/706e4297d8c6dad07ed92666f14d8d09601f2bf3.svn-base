package com.talenton.organ.ui.user;

import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.text.InputType;
import android.text.TextUtils;
import android.view.View;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.talenton.organ.BaseCompatActivity;
import com.talenton.organ.R;
import com.talenton.base.server.XLTError;
import com.talenton.base.server.XLTResponseCallback;
import com.talenton.base.server.bean.RspLogin;
import com.talenton.base.util.XLTToast;
import com.talenton.base.server.UserServer;
import com.talenton.base.server.bean.ObjectCode;

public class ModifyPasswordActivity extends BaseCompatActivity implements View.OnClickListener{

    public final static int TYPE_FORGET_PASSWORD = 1;
    public final static int TYPE_MODIFY_PASSWORD = 2;

    private EditText mPhone, mVerificationCode, mPassword, mConfirmPassowrd;
    private TextView mGetVerificationCode;
    private ImageView mEye, mConfirmEye;
    private boolean isOpenEye = false, isOpenConfirmEye = true;

    private Handler mHandler = new Handler();
    private int mTimers = 60;

    private int type;
    private String phone;

    public static void startModifyPasswordActivity(Context context, String phone,int type){
        Intent intent = new Intent(context, ModifyPasswordActivity.class);
        intent.putExtra("type", type);
        intent.putExtra("phone",phone);
        context.startActivity(intent);
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_modify_password);

        type = getIntent().getIntExtra("type", TYPE_MODIFY_PASSWORD);
        phone = getIntent().getStringExtra("phone");

        mPhone = (EditText)findViewById(R.id.et_phone);
        mVerificationCode = (EditText)findViewById(R.id.et_verification_code);
        mPassword = (EditText)findViewById(R.id.et_password);
        mConfirmPassowrd = (EditText)findViewById(R.id.et_confirm_password);
        mGetVerificationCode = (TextView)findViewById(R.id.tv_verification_code);
        mEye = (ImageView)findViewById(R.id.iv_eye);
        mConfirmEye = (ImageView)findViewById(R.id.iv_eye_confirm);
        mGetVerificationCode.setOnClickListener(this);
        findViewById(R.id.tv_login_next).setOnClickListener(this);
        findViewById(R.id.layout_eye).setOnClickListener(this);
        findViewById(R.id.layout_eye_confirm).setOnClickListener(this);

        if (!TextUtils.isEmpty(phone)){
            mPhone.setText(phone);
            mPhone.setSelection(mPhone.length());
        }
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        if(mHandler != null){
            mHandler.removeCallbacks(timerRunnable);
        }
    }

    @Override
    public void onClick(View v) {
        final String phone = mPhone.getText().toString().trim();
        String code = mVerificationCode.getText().toString().trim();
        String password = mPassword.getText().toString().trim();
        switch (v.getId()){
            case R.id.tv_verification_code:
                if (phone.length() != 11){
                    XLTToast.makeText(this, R.string.login_error_invalid_phone).show();
                    mPhone.requestFocus();
                    return;
                }
                /*
                if (!SystemUtil.isMobileNO(phone)){
                    XLTToast.makeText(this, R.string.login_invalid_phone_prompt, Toast.LENGTH_LONG).show();
                    return;
                }
                */
                mGetVerificationCode.setEnabled(false);
                mTimers = 60;
                mHandler.postDelayed(timerRunnable, 1000);

                UserServer.getSmscode(phone, UserServer.SMS_CODE_MODIFIY_PASSWORD, new XLTResponseCallback<ObjectCode>() {
                    @Override
                    public void onResponse(ObjectCode data, XLTError error) {
                        if (error != null) {
                            mHandler.removeCallbacks(timerRunnable);
                            mGetVerificationCode.setEnabled(true);
                            mGetVerificationCode.setText(R.string.login_get_sms_code);
                            XLTToast.makeText(ModifyPasswordActivity.this, error.getMesssage(), Toast.LENGTH_LONG).show();
                        }
                    }
                });
                break;
            case R.id.tv_login_next:

                if (TextUtils.isEmpty(phone)) {
                    XLTToast.makeText(this, R.string.login_error_empty_phone).show();
                    mPhone.requestFocus();
                    return;
                }else if (phone.length() != 11){
                    XLTToast.makeText(this, R.string.login_error_invalid_phone).show();
                    mPhone.requestFocus();
                    return;
                }

                if (code.length() < 4) {
                    XLTToast.makeText(this, R.string.login_prompt_sms_code).show();
                    mVerificationCode.requestFocus();
                    return;
                }
                if (TextUtils.isEmpty(password)) {
                    XLTToast.makeText(this, R.string.login_error_empty_password).show();
                    mPassword.requestFocus();
                    return;
                }else if (password.length() < 6 || password.length() > 16){
                    XLTToast.makeText(this, R.string.login_error_invalid_password).show();
                    mPassword.requestFocus();
                    return;
                }

                if(!password.equals(mConfirmPassowrd.getText().toString().trim())){
                    XLTToast.makeText(this, R.string.login_error_different_password).show();
                    mConfirmPassowrd.requestFocus();
                    return;
                }

                hideSoftInput(v);
                showProgress(R.string.main_processing);
                UserServer.modifyPassword(phone, password, code, type, new XLTResponseCallback<ObjectCode>() {
                    @Override
                    public void onResponse(ObjectCode data, XLTError error) {
                        hideProgress();
                        if (error == null) {
                            XLTToast.makeText(ModifyPasswordActivity.this, R.string.login_modify_password_success).show();
                            if (type == ModifyPasswordActivity.TYPE_FORGET_PASSWORD) {
                                //UserServer.reLogin(false);
                                Intent intent = new Intent();
                                setResult(RESULT_OK, intent);
                                finish();
                            }else if(type == ModifyPasswordActivity.TYPE_MODIFY_PASSWORD){
                                reLogin();
                            }

                        } else {
                            String msg = TextUtils.isEmpty( error.getMesssage()) ? "修改失败" : error.getMesssage();
                            XLTToast.makeText(ModifyPasswordActivity.this, msg).show();
                        }
                    }
                });

                break;
            case R.id.layout_eye:
                isOpenEye = !isOpenEye;
                if(isOpenEye){
                    mEye.setImageResource(R.mipmap.eye_open);
                    mPassword.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_NORMAL);
                    mPassword.setSelection(mPassword.getText().length());
                }else{
                    mEye.setImageResource(R.mipmap.eye_close);
                    mPassword.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD);
                    mPassword.setSelection(mPassword.getText().length());
                }
                break;
            case R.id.layout_eye_confirm:
                isOpenConfirmEye = !isOpenConfirmEye;
                if(isOpenConfirmEye){
                    mConfirmEye.setImageResource(R.mipmap.eye_open);
                    mConfirmPassowrd.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_NORMAL);
                    mConfirmPassowrd.setSelection(mConfirmPassowrd.getText().length());
                }else{
                    mConfirmEye.setImageResource(R.mipmap.eye_close);
                    mConfirmPassowrd.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD);
                    mConfirmPassowrd.setSelection(mConfirmPassowrd.getText().length());
                }
                break;
        }
    }

    private void reLogin(){
        showProgress(R.string.login_logining);
        UserServer.reLogin(false, new XLTResponseCallback<RspLogin>() {
            @Override
            public void onResponse(RspLogin data, XLTError error) {
                // TODO Auto-generated mthod stub
                if(error == null && data != null){
                    finish();
                }else{
                    String msg = TextUtils.isEmpty( error.getMesssage()) ? "自动登陆失败" : error.getMesssage();
                    XLTToast.makeText(ModifyPasswordActivity.this, msg).show();
                    UserServer.reLogin(true);
                }
                hideProgress();
            }
        });
    }

    @Override
    protected int getTitleResourceId() {
        return R.string.login_modify_password;
    }

    Runnable timerRunnable = new Runnable() {
        @Override
        public void run() {
            mTimers--;
            if (mTimers <= 0){
                mGetVerificationCode.setEnabled(true);
                mGetVerificationCode.setText(R.string.login_get_sms_code);
            }else {
                mGetVerificationCode.setText(String.format("%d%s", mTimers, getString(R.string.login_count_down)));
                mHandler.postDelayed(this, 1000);
            }
        }
    };
}
