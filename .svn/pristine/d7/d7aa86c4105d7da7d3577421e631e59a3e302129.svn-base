package com.talenton.organ.ui.user;

import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.text.TextUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;

import com.handmark.pulltorefresh.library.PullToRefreshBase;
import com.handmark.pulltorefresh.library.PullToRefreshListView;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.talenton.organ.BaseCompatActivity;
import com.talenton.organ.R;
import com.talenton.base.server.XLTError;
import com.talenton.base.server.XLTResponseCallback;
import com.talenton.base.util.DateUtil;
import com.talenton.base.util.ImageLoaderManager;
import com.talenton.base.widget.LoadingViewHolder;
import com.talenton.organ.event.DeleteRelationEvent;
import com.talenton.organ.event.ModifyRelationEvent;
import com.talenton.organ.server.FeedServer;
import com.talenton.organ.server.bean.feed.MineCircle;
import com.talenton.organ.server.bean.feed.RspMineCircle;

import org.greenrobot.eventbus.EventBus;
import org.greenrobot.eventbus.Subscribe;
import org.greenrobot.eventbus.ThreadMode;

import java.util.LinkedList;

public class FamilyActivity extends BaseCompatActivity implements View.OnClickListener, AdapterView.OnItemClickListener{

    private int mCurPage, mSumCount;
    private PullToRefreshListView mPullRefreshListView;
    private ListView mListView;
    private LoadingViewHolder mLoading;
    private PagerAdapter mAdapter;
    private long circleId, babyId;

    public static void startFamilyActivity(Context context, long circleId, long babyId){
        Intent intent = new Intent(context, FamilyActivity.class);
        intent.putExtra("circleId", circleId);
        intent.putExtra("babyId", babyId);
        context.startActivity(intent);
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_family);
        circleId = this.getIntent().getLongExtra("circleId", 0);
        babyId = this.getIntent().getLongExtra("babyId", 0);

        mPullRefreshListView = (PullToRefreshListView) findViewById(R.id.pull_refresh_list);
        mPullRefreshListView.setMode(PullToRefreshBase.Mode.BOTH);
        mPullRefreshListView.setOnRefreshListener(new PullToRefreshBase.OnRefreshListener2() {

            @Override
            public void onPullDownToRefresh(PullToRefreshBase refreshView) {
                loadNewData();
            }

            @Override
            public void onPullUpToRefresh(PullToRefreshBase refreshView) {
                loadMoreData();
            }

        });
        mListView = mPullRefreshListView.getRefreshableView();

        mAdapter = new PagerAdapter(this);
        mListView.setAdapter(mAdapter);
        mListView.setOnItemClickListener(this);

        View loading = findViewById(R.id.loading_container);
        mLoading = new LoadingViewHolder(mPullRefreshListView, loading, this, this);

        EventBus.getDefault().register(this);
    }

    @Subscribe(threadMode = ThreadMode.MAIN)
    public void onEventMainThread(ModifyRelationEvent event){
        if(event == null || mAdapter == null || TextUtils.isEmpty(event.gxname)) return;
        mAdapter.notifyDataByMemberId(event.memberId, event.atteintionType, event.gxid, event.gxname);
    }

    @Subscribe(threadMode = ThreadMode.MAIN)
    public void onEventMainThread(DeleteRelationEvent event){
        if(event == null || event.memberId <= 0) return;

        mAdapter.deleteDataByMemberId(event.memberId);
    }

    @Override
    public void onDestroy() {
        // TODO Auto-generated method stub
        super.onDestroy();
        EventBus.getDefault().unregister(this);
    }

    @Override
    protected void onPostCreate(Bundle savedInstanceState) {
        super.onPostCreate(savedInstanceState);

        // Trigger the initial hide() shortly after the activity has been
        // created, to briefly hint to the user that UI controls
        // are available.
        loadData();
    }

    private void loadData(){
        mLoading.showView(LoadingViewHolder.VIEW_TYPE_LOADING);
        FeedServer.getCircleMemberList(circleId, "", "", new XLTResponseCallback<RspMineCircle>() {
            @Override
            public void onResponse(RspMineCircle data, XLTError error) {
                if (error == null && data != null) {
                    initData(data);
                    mLoading.showView(LoadingViewHolder.VIEW_TYPE_DATA);
                } else if (error != null) {
                    mLoading.showView(LoadingViewHolder.VIEW_TYPE_NO_NOTWORK);
                } else {
                    mLoading.showView(LoadingViewHolder.VIEW_TYPE_NO_DATA);

                }
            }
        });
    }

    private void loadNewData(){
        FeedServer.getCircleMemberList(circleId, "","", new XLTResponseCallback<RspMineCircle>() {
            @Override
            public void onResponse(RspMineCircle data, XLTError error) {
                mPullRefreshListView.postDelayed(new Runnable() {
                    @Override
                    public void run() {
                        mPullRefreshListView.onRefreshComplete();
                    }
                }, 1000);
                if (error == null && data != null) {
                    initData(data);
                }
            }
        });
    }

    private void initData(RspMineCircle data){
        mCurPage = 1;
        mSumCount = data.count;

        mAdapter.setDatas(data.list);
    }

    private void loadMoreData() {
        if (mSumCount <= 0 || (mCurPage * 20) >= mSumCount) {
            showShortToast(getString(R.string.toast_text_no_data));
            mPullRefreshListView.postDelayed(new Runnable() {
                @Override
                public void run() {
                    mPullRefreshListView.onRefreshComplete();
                }
            }, 1000);
            //mPullRefreshListView.setMode(PullToRefreshBase.Mode.PULL_FROM_START);
            //mPullRefreshListView.getFooterLoadingView().setVisibility(View.GONE);
            return;
        }

        FeedServer.getCircleMemberList(circleId, "", String.valueOf(mCurPage+1), new XLTResponseCallback<RspMineCircle>() {
            @Override
            public void onResponse(RspMineCircle data, XLTError error) {
                mPullRefreshListView.postDelayed(new Runnable() {
                    @Override
                    public void run() {
                        mPullRefreshListView.onRefreshComplete();
                    }
                }, 1000);
                if (error == null && data != null) {
                    mCurPage++;
                    mAdapter.addDatas(data.list);
                }
            }
        });
    }

    @Override
    protected int getTitleResourceId() {
        return R.string.family_title;
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()){
            case R.id.btn_reload:
            case R.id.empty_action:
                loadData();
                break;
        }
    }

    @Override
    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
        MineCircle circle = (MineCircle)parent.getAdapter().getItem(position);
        if (circle != null) {
            ShowFamilyActivity.startShowCircleActivity(this, circle, babyId);
        }
    }

    private class PagerAdapter extends BaseAdapter {

        LayoutInflater mInflater;
        LinkedList<MineCircle> mDatas;
        Context mContext;

        public PagerAdapter(Context context){
            mContext = context;
            mInflater = LayoutInflater.from(context);
            mDatas = new LinkedList<>();
        }

        public void setDatas(LinkedList<MineCircle> datas){
            mDatas.clear();
            if (datas != null && datas.size() > 0){
                mDatas.addAll(datas);
            }
            notifyDataSetChanged();
        }

        public void addDatas(LinkedList<MineCircle> datas){
            if (datas != null && datas.size() > 0){
                mDatas.addAll(datas);
                notifyDataSetChanged();
            }
        }

        public void deleteDataByMemberId(long memberId){
            for (MineCircle m : mDatas){
                if (m.circle_member_id == memberId){
                    if (m.ext_relation != null){
                        mDatas.remove(m);
                        notifyDataSetChanged();
                        break;
                    }
                }
            }
        }

        public void notifyDataByMemberId(long memberId, int attentionType, int gxid, String gxname){
            for (MineCircle m : mDatas){
                if (m.circle_member_id == memberId){
                    if (m.ext_relation != null){
                        m.ext_relation.gxid = gxid;
                        m.ext_relation.gxname = gxname;
                        m.attention_type = attentionType;
                        notifyDataSetChanged();
                        break;
                    }
                }
            }
        }

        @Override
        public int getCount() {
            return mDatas.size();
        }

        @Override
        public MineCircle getItem(int position) {
            return mDatas.get(position);
        }

        @Override
        public long getItemId(int position) {
            return position;
        }

        @Override
        public View getView(int position, View convertView, ViewGroup parent) {
            HolderView holder;
            if (convertView == null){
                convertView = mInflater.inflate(R.layout.item_user_family, parent, false);
                holder = new HolderView();
                holder.mPhoto = (ImageView)convertView.findViewById(R.id.user_image);
                holder.mName = (TextView)convertView.findViewById(R.id.tv_name);
                holder.mDescription = (TextView)convertView.findViewById(R.id.tv_info);
                holder.mType = (TextView)convertView.findViewById(R.id.tv_type);
                convertView.setTag(holder);
            }else {
                holder = (HolderView)convertView.getTag();
            }
            MineCircle data = getItem(position);
            ImageLoader.getInstance().displayImage(data.getCircleMember().avatar, holder.mPhoto, ImageLoaderManager.DEFAULT_USER_IMAGE_DISPLAYER);
            if(data.ext_relation != null){
                holder.mName.setText(data.ext_relation.gxname);
            }
            if (data.ext_browse != null){
                StringBuffer info = new StringBuffer();
                if (data.ext_browse.browse_count > 0){
                    info.append(String.format("访问%d次 ", data.ext_browse.browse_count));
                }
                info.append(DateUtil.parseTime(mContext, data.ext_browse.create_time));
                holder.mDescription.setText(info.toString());
            }
            holder.mType.setVisibility(View.VISIBLE);
            if(data.attention_type == MineCircle.ATTENTION_TYPE_CREATE){
                holder.mType.setBackgroundResource(R.drawable.btn_main_bg);
                holder.mType.setText("圈主");
            }
            else if(data.attention_type == MineCircle.ATTENTION_TYPE_ADMIN){
                holder.mType.setBackgroundResource(R.drawable.btn_bg_login_wechat);
                holder.mType.setText("管理员");
            }else {
                holder.mType.setVisibility(View.GONE);
            }
            return convertView;
        }
    }

    private class HolderView{
        public ImageView mPhoto;
        public TextView mName, mDescription, mType;
    }
}
