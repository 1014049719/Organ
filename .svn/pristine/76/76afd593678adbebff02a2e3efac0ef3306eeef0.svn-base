package com.talenton.organ.ui.shop;

import android.app.Activity;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.pingplusplus.android.PaymentActivity;
import com.talenton.organ.BaseCompatActivity;
import com.talenton.organ.R;
import com.talenton.base.server.XLTError;
import com.talenton.base.server.XLTResponseCallback;
import com.talenton.base.util.ImageLoaderManager;
import com.talenton.organ.event.PayCommentEvent;
import com.talenton.organ.server.ShopServer;
import com.talenton.organ.server.bean.shop.AdressInfo;
import com.talenton.organ.server.bean.shop.GoodsCartInfo;
import com.talenton.organ.server.bean.shop.GoodsOrderInfo;
import com.talenton.organ.server.bean.shop.PayOkShowData;
import com.talenton.organ.server.bean.shop.RecvListAdressData;
import com.talenton.organ.server.bean.shop.SendListAdressData;
import com.talenton.organ.server.bean.shop.SendPayGetOrderData;
import com.talenton.organ.server.bean.shop.SendUpdateOrderData;

import org.greenrobot.eventbus.EventBus;
import org.json.JSONException;
import org.json.JSONObject;

import java.math.BigDecimal;
import java.util.ArrayList;

/**
 * Created by xiaoxiang on 2016/5/27.
 */

public class ConfirmOrderNowActivity extends BaseCompatActivity implements View.OnClickListener{


    private ListView mListView;
    private GoodsCartInAdapter mAdapter;

    private Button mButton;
    private LinearLayout address_LinearLayout;
    private ArrayList<AdressInfo> mAdressInfoList;
    private AdressInfo mDefautAdress;
    private ArrayList<GoodsCartInfo> mGoodsCartInfoList;

    private GoodsOrderInfo mGoodsOrderInfo;
    private TextView addressName;
    private TextView addressNumber;
    private TextView addressDetail;
    private int payType;
    private ImageButton shop_select_weixin;
    private ImageButton shop_select_alipay;
    private LinearLayout shop_pay_ali;
    private LinearLayout shop_pay_weixin;
    private static final int REQUEST_CODE_PAYMENT_PAY = 1;
    String orderid;
    private TextView shop_cart_money;
    private double price;
    private static final int REQUEST_CODE_SELECT_ADDRESS=2;
    private static final int REQUEST_CODE_ADD_ADDRESS=3;
    private PayOkShowData mPayOkShowData;
    @Override
    protected void onCreate(Bundle savedInstanceState) {

        setContentView(R.layout.activity_shop_confirm_order);
        super.onCreate(savedInstanceState);

        mGoodsCartInfoList = new ArrayList<GoodsCartInfo>();
        mGoodsCartInfoList = (ArrayList<GoodsCartInfo>) getIntent().getExtras().getSerializable("mSelected");

        initView();
        getAdressList();

    }

    public static void startConfirmOrderNowActivity(Context context, ArrayList<GoodsCartInfo> mGoodsCartInfoList){

        Intent intent=new Intent();
        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        Bundle bundle = new Bundle();
        bundle.putSerializable("mSelected", mGoodsCartInfoList);
        intent.putExtras(bundle);
        intent.setClass(context, ConfirmOrderNowActivity.class);
        context.startActivity(intent);
    }



    /**
     * 初始化view
     * @param
     */
    private void initView() {

        mListView=(ListView)findViewById(R.id.shop_confirm_order_list_view);
        mListView.setSelector(new ColorDrawable(Color.TRANSPARENT));
        mAdapter = new GoodsCartInAdapter(this);
        mListView.setAdapter(mAdapter);
        mAdapter.setData(mGoodsCartInfoList);
        mButton=(Button)findViewById(R.id.shopping_buy);
        mButton.setOnClickListener(this);
        address_LinearLayout=(LinearLayout)findViewById(R.id.address_LinearLayout);
        address_LinearLayout.setOnClickListener(this);
        mAdressInfoList=new ArrayList<AdressInfo>();
        mDefautAdress=new AdressInfo();
        mPayOkShowData=new PayOkShowData();

        addressName=(TextView)findViewById(R.id.address_name);
        addressNumber=(TextView)findViewById(R.id.address_number);
        addressDetail=(TextView)findViewById(R.id.address_detail);
        payType=2;//默认微信
        shop_select_weixin=(ImageButton)findViewById(R.id.shop_select_weixin);
        shop_select_alipay=(ImageButton)findViewById(R.id.shop_select_zhifubao);

        shop_pay_ali=(LinearLayout)findViewById(R.id.shop_pay_ali);
        shop_pay_weixin=(LinearLayout)findViewById(R.id.shop_pay_wx);
        shop_pay_weixin.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                shop_select_weixin.setBackgroundResource(R.mipmap.icon_shop_cart_select);
                shop_select_alipay.setBackgroundResource(R.mipmap.icon_shop_cart_not_select);
                payType=2;
            }
        });
        shop_pay_ali.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                shop_select_alipay.setBackgroundResource(R.mipmap.icon_shop_cart_select);
                shop_select_weixin.setBackgroundResource(R.mipmap.icon_shop_cart_not_select);
                payType=1;
            }
        });

        shop_cart_money=(TextView)findViewById(R.id.shop_cart_money);
        price =0;
        for(int i=0;i<mGoodsCartInfoList.size();i++){
            double tempmultiply =multiply(mGoodsCartInfoList.get(i).goods_price,mGoodsCartInfoList.get(i).goods_number);
            price = add(price, tempmultiply);
      //      price+=mGoodsCartInfoList.get(i).goods_price*mGoodsCartInfoList.get(i).goods_number;
        }
        shop_cart_money.setText("￥"+price);
        mPayOkShowData.price=price;

    }
    @Override
    protected int getTitleResourceId() {
        return R.string.shop_text_confirm_order;
    }

    private  void getShowAdressList(){
        showProgress("正在更新地址数据，请等待");
        SendListAdressData mSendListAdressData= new SendListAdressData();
        ShopServer.getAdressListData(mSendListAdressData,
                new XLTResponseCallback<RecvListAdressData>() {

                    @Override
                    public void onResponse(RecvListAdressData data, XLTError error) {

                        // TODO Auto-generated method stub

                        if ((error == null) && (data != null)) {

                            mAdressInfoList.clear();
                            mAdressInfoList = data.list;
                            if (comPareDefaultAddress(mAdressInfoList)) {

                            } else {
                                addressName.setText(null);
                                addressNumber.setText(null);
                                addressDetail.setText(null);

                            }
                        } else if (error != null) {

                            Toast.makeText(getApplicationContext(), error.getMesssage(), Toast.LENGTH_SHORT).show();

                        }else {
                            Toast.makeText(getApplicationContext(), "地址返回空值", Toast.LENGTH_SHORT).show();

                        }
                        hideProgress();

                    }


                });
    }

    private  void getAdressList(){
        showProgress("正在获取地址数据，请等待");
        SendListAdressData mSendListAdressData= new SendListAdressData();
        ShopServer.getAdressListData(mSendListAdressData,
                new XLTResponseCallback<RecvListAdressData>() {

                    @Override
                    public void onResponse(RecvListAdressData data, XLTError error) {

                        // TODO Auto-generated method stub

                        if ((error == null) && (data != null)) {
                            mAdressInfoList.clear();
                            mAdressInfoList = data.list;
                            if (findDefaultAddress(mAdressInfoList)) {

                            } else {
                                Toast.makeText(getApplicationContext(), "你还没有填写收货地址", Toast.LENGTH_SHORT).show();
                                Intent intent=new Intent();
                                intent.setClass(ConfirmOrderNowActivity.this, AddNewAdressActivity.class);
                                startActivityForResult(intent, REQUEST_CODE_ADD_ADDRESS);

                            }
                        } else if (error != null) {

                            Toast.makeText(getApplicationContext(), error.getMesssage(), Toast.LENGTH_SHORT).show();
                            finish();
                        }else {
                            Toast.makeText(getApplicationContext(), "地址返回空值", Toast.LENGTH_SHORT).show();
                            finish();
                        }
                        hideProgress();

                    }


                });
    }

    private boolean comPareDefaultAddress(ArrayList<AdressInfo> mAdressInfoList){

        for(int i=0;i<mAdressInfoList.size();i++){
            if((mAdressInfoList.get(i).consignee.equals(mDefautAdress.consignee))&&
                    (mAdressInfoList.get(i).mobile.equals(mDefautAdress.mobile))&&
                    (mAdressInfoList.get(i).address.equals(mDefautAdress.address))&&
                    (mAdressInfoList.get(i).area.equals(mDefautAdress.area))){
                return true;
            }
        }

        return false;
    }


    private boolean findDefaultAddress(ArrayList<AdressInfo> mAdressInfoList){

        for(int i=0;i<mAdressInfoList.size();i++){
            if(mAdressInfoList.get(i).is_default==1){
                mDefautAdress=mAdressInfoList.get(i);
                addressName.setText(mDefautAdress.consignee);
                addressNumber.setText(mDefautAdress.mobile);
                addressDetail.setText(mDefautAdress.area+mDefautAdress.address);
                mPayOkShowData.consignee=mDefautAdress.consignee;
                mPayOkShowData.mobile=mDefautAdress.mobile;
                mPayOkShowData.area=mDefautAdress.area;
                mPayOkShowData.address=mDefautAdress.address;
                return true;
            }
        }
        if(mAdressInfoList.size()>0){
            mDefautAdress=mAdressInfoList.get(0);
            addressName.setText(mDefautAdress.consignee);
            addressNumber.setText(mDefautAdress.mobile);
            addressDetail.setText(mDefautAdress.area+mDefautAdress.address);
            mPayOkShowData.consignee=mDefautAdress.consignee;
            mPayOkShowData.mobile=mDefautAdress.mobile;
            mPayOkShowData.area=mDefautAdress.area;
            mPayOkShowData.address=mDefautAdress.address;
            return true;
        }
        return false;
    }

    public boolean bHaveAddress() {
        if (addressName.getText().toString().trim().length() == 0) {
            Toast.makeText(getApplicationContext(), "你还没有填写收货地址", Toast.LENGTH_SHORT).show();
            Intent intent=new Intent();
            intent.setClass(ConfirmOrderNowActivity.this, AddNewAdressActivity.class);
            startActivityForResult(intent, REQUEST_CODE_ADD_ADDRESS);
            return false;
        }
        return true;
    }
    public void PaymentTask () {

        if(!bHaveAddress()){
            return;
        }
        Toast.makeText(this, "正在获取后端charge数据，请稍后", Toast.LENGTH_SHORT).show();
        showProgress("正在获取后端charge数据，请等待");
        //按键点击之后的禁用，防止重复点击
        mButton.setOnClickListener(null);
        /*
        mDefautAdress.is_default=1;
        mDefautAdress.address="ggyuggfdd";
        mDefautAdress.consignee="fghyff";
        mDefautAdress.area="甘肃省酒泉市肃北蒙古族自治县";
        mDefautAdress.mobile="18620519838";
        */
        SendPayGetOrderData mSendPayGetOrderData= new SendPayGetOrderData(mDefautAdress,payType,mGoodsCartInfoList);
        ShopServer.getPayOrdercharge(mSendPayGetOrderData,
                new XLTResponseCallback<JSONObject>() {


                    @Override
                    public void onResponse(JSONObject data, XLTError error) {

                        // TODO Auto-generated method stub
                        hideProgress();
                        if ((error == null) && (data != null)) {

                            try {
                                orderid = data.getString("orderid");

                                pay(data.getString("charge"));
                            } catch (JSONException e) {
                                // TODO Auto-generated catch block

                                e.printStackTrace();
                            }
                        } else if (error != null) {

                            String a = error.getMesssage();
                            Toast.makeText(getApplicationContext(), a, Toast.LENGTH_SHORT).show();

                            finish();
                        } else {
                            Toast.makeText(getApplicationContext(), "charge返回空值", Toast.LENGTH_SHORT).show();

                            finish();
                        }



                    }


                });

    }


    @Override
    public void onClick(View v) {
        Intent intent = new Intent();
        switch (v.getId()) {
            case R.id.shopping_buy:

                    PaymentTask();
                break;
            case R.id.address_LinearLayout:
                if(!bHaveAddress()){
                    break;
                }
                intent.setClass(ConfirmOrderNowActivity.this, SelectAddressActivity.class);
                Bundle bundle = new Bundle();
                bundle.putSerializable("mDefautAdress", mDefautAdress);
                intent.putExtras(bundle);
                startActivityForResult(intent, REQUEST_CODE_SELECT_ADDRESS);
                break;

        }
    }

    private void pay(String dataStringcharge){
        Toast.makeText(this, "正在调用支付接口，请等待", Toast.LENGTH_SHORT).show();

        String packageName = getPackageName();
        Intent intent=new Intent();
        ComponentName componentName = new ComponentName(packageName, packageName + ".wxapi.WXPayEntryActivity");
        intent.setComponent(componentName);
        intent.putExtra(PaymentActivity.EXTRA_CHARGE, dataStringcharge);
        startActivityForResult(intent, REQUEST_CODE_PAYMENT_PAY);
    }
    /////// 发送订单
    public void SendOrderInfo(String sOrder, int iResult, String sResult) {
        Toast.makeText(this, "正在发送订单更新", Toast.LENGTH_SHORT).show();
        ShopServer.getUpdateOrder(new SendUpdateOrderData(sOrder, iResult, sResult),
                new XLTResponseCallback<Object>() {

                    @Override
                    public void onResponse(Object data, XLTError error) {

                        if ((error == null)&& (data != null)){

                            Toast.makeText(getApplicationContext(), "支付接口更新已经返回", Toast.LENGTH_SHORT).show();

                        }



                    }
                });
    }
    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {

        if (requestCode == REQUEST_CODE_PAYMENT_PAY) {
            Toast.makeText(this, "支付接口已经返回", Toast.LENGTH_SHORT).show();
            if (resultCode == Activity.RESULT_OK) {

                setResult(RESULT_OK, data);
                String result = data.getExtras().getString("pay_result");
                Log.d("wuxiaoxiang", result);
                mPayOkShowData.bPayOk=false;

				/*
				 * 处理返回值 "success" - payment succeed "fail" - payment failed
				 * "cancel" - user canceld "invalid" - payment plugin not
				 * installed
				 */
                if (result.equals("success")) {
                    SendOrderInfo(orderid, 1, "success");
                    mPayOkShowData.bPayOk=true;
                    PayOrderOkActivity.startPayOrderOkActivity(this, mPayOkShowData);
                    EventBus.getDefault().post(new PayCommentEvent(true));
                } else if (result.equals("fail")) {
                    SendOrderInfo(orderid, 4, "fail");
                    PayOrderOkActivity.startPayOrderOkActivity(this, mPayOkShowData);
                    Toast.makeText(getApplicationContext(), "支付失败，请进入订单再次支付或返回首页", Toast.LENGTH_SHORT).show();
                    EventBus.getDefault().post(new PayCommentEvent(false));
                } else if (result.equals("cancel")) {
                    SendOrderInfo(orderid, 5, "cancel");
                    PayOrderOkActivity.startPayOrderOkActivity(this, mPayOkShowData);
                    Toast.makeText(getApplicationContext(), "您已经取消支付，请进入订单再次支付或返回首页", Toast.LENGTH_SHORT).show();
                    EventBus.getDefault().post(new PayCommentEvent(false));
                } else if (result.equals("invalid")) {
                    SendOrderInfo(orderid, 5, "cancel");
                    PayOrderOkActivity.startPayOrderOkActivity(this, mPayOkShowData);
                    Toast.makeText(getApplicationContext(), "您没有安装微信或者支付宝", Toast.LENGTH_SHORT).show();
                    EventBus.getDefault().post(new PayCommentEvent(false));
                }

                String errorMsg = data.getExtras().getString("error_msg"); // 错误信息

                finish();

            }
        }

        if (requestCode == REQUEST_CODE_SELECT_ADDRESS) {

            if (resultCode == Activity.RESULT_OK) {

                setResult(RESULT_OK, data);
                mDefautAdress = (AdressInfo) data.getExtras().getSerializable("mSelected");
                addressName.setText(mDefautAdress.consignee);
                addressNumber.setText(mDefautAdress.mobile);
                addressDetail.setText(mDefautAdress.area+mDefautAdress.address);
                mPayOkShowData.consignee=mDefautAdress.consignee;
                mPayOkShowData.mobile=mDefautAdress.mobile;
                mPayOkShowData.area=mDefautAdress.area;
                mPayOkShowData.address=mDefautAdress.address;
            }

            if(resultCode == Activity.RESULT_CANCELED){
                getShowAdressList();
            }

        }
        if (requestCode == REQUEST_CODE_ADD_ADDRESS) {

            if (resultCode == Activity.RESULT_OK) {

                setResult(RESULT_OK, data);
                mDefautAdress = (AdressInfo) data.getExtras().getSerializable("mSelected");
                addressName.setText(mDefautAdress.consignee);
                addressNumber.setText(mDefautAdress.mobile);
                addressDetail.setText(mDefautAdress.area+mDefautAdress.address);
                mPayOkShowData.consignee=mDefautAdress.consignee;
                mPayOkShowData.mobile=mDefautAdress.mobile;
                mPayOkShowData.area=mDefautAdress.area;
                mPayOkShowData.address=mDefautAdress.address;
            }
        }


        // Log.d("wuxiaoxiang", "onActivityResult payledouactivity end");
    }

    public class GoodsCartInAdapter extends BaseAdapter {
        private LayoutInflater mInflater;
        private ArrayList<GoodsCartInfo> mGoodsCart;
        private ArrayList<GoodsCartInfo> mGoodsCartPick;

        public boolean bGetData=false;

        public GoodsCartInAdapter(Context context) {
            mInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            mGoodsCart = new ArrayList<GoodsCartInfo>();
            mGoodsCartPick=new ArrayList<GoodsCartInfo>();

        }

        public int getCount() {
            return mGoodsCart.size();
        }

        public ArrayList<GoodsCartInfo> getPikGoodsCartInfo() {
            return mGoodsCartPick;
        }
        public void setData(ArrayList<GoodsCartInfo> paths) {
            mGoodsCart.clear();
            mGoodsCart.addAll(paths);

            notifyDataSetChanged();
        }

        public void changeSelected(int position,boolean b){ //刷新方法

            {
                if(!b) {
                    price = subtract(price, mGoodsCart.get(position).goods_price);
                //        price -= mGoodsCart.get(position).goods_price;

                } else{

                    price = add(price,mGoodsCart.get(position).goods_price);
               //         price += mGoodsCart.get(position).goods_price ;

                }
                shop_cart_money.setText("￥" + price);
            }
            notifyDataSetChanged();

        }

        public GoodsCartInfo getItem(int position) {
            return mGoodsCart.get(position);
        }

        public long getItemId(int position) {
            return position;
        }


        public View getView(final int position, View convertView, ViewGroup parent) {
            // TODO Auto-generated method stub
            ViewHolder holder = null;
            if (convertView == null) {
                holder = new ViewHolder();
                convertView = mInflater.inflate(R.layout.item_shop_cart, parent, false);

                holder.name = (TextView) convertView.findViewById(R.id.shop_cart_goods_name);
                holder.imageButton = (ImageButton)convertView.findViewById(R.id.shop_cart_goods_pik);
                holder.linearLayout_imageButton=(LinearLayout)convertView.findViewById(R.id.LinearLayout_shop_cart_goods_pik);
                holder.price = (TextView)convertView.findViewById(R.id.shop_cart_price);
                holder.goodsnum=(TextView)convertView.findViewById(R.id.shop_cart_sale_number);
                holder.img=(ImageView)convertView.findViewById(R.id.shop_cart_goods_picture);
                holder.imgmin=(ImageView)convertView.findViewById(R.id.icon_shop_min);
                holder.imgpuls=(ImageView)convertView.findViewById(R.id.icon_shop_plus);
                holder.goodsaddnum=(TextView)convertView.findViewById(R.id.shop_cart_number);


                convertView.setTag(holder);
            } else {
                holder = (ViewHolder) convertView.getTag();
            }
            holder.position = position;
            holder.imgmin.setVisibility(View.VISIBLE);
            holder.imgpuls.setVisibility(View.VISIBLE);
            holder.goodsaddnum.setVisibility(View.VISIBLE);
            holder.linearLayout_imageButton.setVisibility(View.GONE);
            final GoodsCartInfo item = getItem(position);
            final TextView tvNumber = holder.goodsaddnum;
            final TextView tvNum = holder.goodsnum;

            holder.imgmin.setOnClickListener(new View.OnClickListener() {

                @Override
                public void onClick(View arg0) {

                    int num = Integer.valueOf(tvNumber.getText().toString()).intValue();
                    if(num>1){
                        num--;
                        tvNumber.setText(String.valueOf(num));
                        tvNum.setText(String.valueOf(num));
                        changeSelected(position,false);
                    }

                }

            });
            holder.imgpuls.setOnClickListener(new View.OnClickListener() {

                @Override
                public void onClick(View arg0) {

                    int num = Integer.valueOf(tvNumber.getText().toString()).intValue();

                    num++;

                    tvNumber.setText(String.valueOf(num));
                    tvNum.setText(String.valueOf(num));

                    changeSelected(position,true);
                }

            });

            holder.name.setText(item.name);
            holder.price.setText("￥"+item.goods_price);



            ImageLoaderManager.getInstance().displayImage(mGoodsCart.get(position).goods_img, holder.img, ImageLoaderManager.DEFAULT_IMAGE_GRAY_LOADING_DISPLAYER, null, null);

            return convertView;
        }

        public class ViewHolder {
            ImageButton imageButton;
            LinearLayout linearLayout_imageButton;
            TextView name;
            TextView price;
            TextView goodsnum;
            TextView goodsaddnum;
            ImageView img;
            public int position;
            ImageView imgmin;
            ImageView imgpuls;
        }



    }

    public static double multiply(double v1, double v2)
    {
        BigDecimal b1 = new BigDecimal(Double.toString(v1));
        BigDecimal b2 = new BigDecimal(Double.toString(v2));
        return b1.multiply(b2).doubleValue();
    }
    public static double add(double v1, double v2)
    {
        BigDecimal b1 = new BigDecimal(Double.toString(v1));
        BigDecimal b2 = new BigDecimal(Double.toString(v2));
        return b1.add(b2).doubleValue();
    }
    public static double subtract(double v1, double v2)
    {
        BigDecimal b1 = new BigDecimal(Double.toString(v1));
        BigDecimal b2 = new BigDecimal(Double.toString(v2));
        return b1.subtract(b2).doubleValue();
    }

}
