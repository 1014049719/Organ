package com.talenton.organ.ui.feed;

import android.content.Context;
import android.content.Intent;
import android.graphics.Color;
import android.os.Bundle;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;

import com.handmark.pulltorefresh.library.PullToRefreshBase;
import com.handmark.pulltorefresh.library.PullToRefreshListView;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.talenton.organ.BaseCompatActivity;
import com.talenton.organ.R;
import com.talenton.base.server.UserServer;
import com.talenton.base.server.XLTError;
import com.talenton.base.server.XLTResponseCallback;
import com.talenton.base.util.ImageLoaderManager;
import com.talenton.base.widget.LoadingViewHolder;
import com.talenton.organ.server.FeedServer;
import com.talenton.organ.server.bean.feed.CircleRankData;
import com.talenton.organ.server.bean.feed.RspCircleRank;

import java.util.LinkedList;

public class CircleRankActivity extends BaseCompatActivity implements View.OnClickListener{

    private static final int PAGE_SIZE = 20;
    private int mCurPage, mSumCount;
    private PullToRefreshListView mPullRefreshListView;
    private ListView mListView;
    public PagerAdapter mAdapter;
    private LoadingViewHolder mLoading;
    private Long mCircleId;

    public static void startCircleRankActivity(Context context, long circleId){
        Intent intent = new Intent(context, CircleRankActivity.class);
        intent.putExtra("circleId", circleId);
        context.startActivity(intent);
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_circle_rank);
        mCircleId = this.getIntent().getLongExtra("circleId", 0);

        mPullRefreshListView = (PullToRefreshListView) findViewById(R.id.pull_refresh_list);
        mPullRefreshListView.setMode(PullToRefreshBase.Mode.BOTH);
        mPullRefreshListView.setOnRefreshListener(new PullToRefreshBase.OnRefreshListener2() {

            @Override
            public void onPullDownToRefresh(PullToRefreshBase refreshView) {
                loadNewData();
            }

            @Override
            public void onPullUpToRefresh(PullToRefreshBase refreshView) {
                loadOlderData();
            }

        });

        // 取得真实的View
        mListView = mPullRefreshListView.getRefreshableView();

        mAdapter = new PagerAdapter(this);
        mListView.setAdapter(mAdapter);

        View loading = findViewById(R.id.loading_container);
        mLoading = new LoadingViewHolder(mPullRefreshListView, loading, this, this);

        loadData();
    }

    private void loadData(){
        mLoading.showView(LoadingViewHolder.VIEW_TYPE_LOADING);
        FeedServer.getCircleRankList(mCircleId, "", new XLTResponseCallback<RspCircleRank>() {
            @Override
            public void onResponse(RspCircleRank data, XLTError error) {
                if (error == null && data != null && data.list != null && data.list.size() > 0) {
                    initData(data);
                    mLoading.showView(LoadingViewHolder.VIEW_TYPE_DATA);
                } else if (error != null) {
                    mLoading.showView(LoadingViewHolder.VIEW_TYPE_NO_NOTWORK);
                } else {
                    mLoading.showView(LoadingViewHolder.VIEW_TYPE_NO_DATA);
                }
            }
        });
    }

    private void initData(RspCircleRank data){
        mCurPage = 1;
        mSumCount = data.count;
        mAdapter.setRankDatas(data.list, data.ext_current_member_order);
    }

    private void loadNewData(){
        FeedServer.getCircleRankList(mCircleId, "", new XLTResponseCallback<RspCircleRank>() {
            @Override
            public void onResponse(RspCircleRank data, XLTError error) {
                mPullRefreshListView.postDelayed(new Runnable() {
                    @Override
                    public void run() {
                        mPullRefreshListView.onRefreshComplete();
                        mPullRefreshListView.setMode(PullToRefreshBase.Mode.BOTH);
                    }
                }, 1000);
                if (error == null && data != null && data.list != null) {
                    initData(data);
                }
            }
        });
    }

    private void loadOlderData(){

        if(mSumCount <= 0 || (mCurPage * 20) >= mSumCount) {

            showShortToast(getString(R.string.toast_text_no_data));
            mPullRefreshListView.postDelayed(new Runnable() {
                @Override
                public void run() {
                    mPullRefreshListView.onRefreshComplete();
                }
            }, 1000);
            //mPullRefreshListView.setMode(PullToRefreshBase.Mode.PULL_FROM_START);
            //mPullRefreshListView.getFooterLoadingView().setVisibility(View.GONE);
            return;
        }

        FeedServer.getCircleRankList(mCircleId, String.valueOf(mCurPage+1), new XLTResponseCallback<RspCircleRank>() {
            @Override
            public void onResponse(RspCircleRank data, XLTError error) {
                mPullRefreshListView.postDelayed(new Runnable() {
                    @Override
                    public void run() {
                        mPullRefreshListView.onRefreshComplete();
                        mPullRefreshListView.setMode(PullToRefreshBase.Mode.BOTH);
                    }
                }, 1000);
                if (error == null && data != null && data.list != null) {
                    mCurPage++;
                    mAdapter.setRankDatas(data.list);
                }
            }
        });
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()){
            case R.id.btn_reload:
            case R.id.empty_action:
                loadData();
                break;
        }
    }

    @Override
    protected int getTitleResourceId() {
        return R.string.circle_rank_title;
    }

    private class PagerAdapter extends BaseAdapter {
        private LayoutInflater mInflater;
        LinkedList<CircleRankData> mRankDatas;

        public PagerAdapter(Context context){
            super();
            mInflater = LayoutInflater.from(context);
            mRankDatas = new LinkedList<>();
        }

        public void setRankDatas(LinkedList<CircleRankData> datas, CircleRankData data){
            if (datas == null) return;
            mRankDatas.clear();
            mRankDatas.addAll(datas);
            if (data != null && data.statistics_id > 0){
                mRankDatas.addFirst(data);
                //if(data.statistics_order > 0 && data.statistics_order < datas.size())
                //    mRankDatas.remove(data.statistics_order);
            }
            notifyDataSetChanged();
        }

        public void setRankDatas(LinkedList<CircleRankData> datas){
            mRankDatas.addAll(datas);
            notifyDataSetChanged();
        }

        @Override
        public int getCount() {
            return mRankDatas.size();
        }

        @Override
        public CircleRankData getItem(int position) {
            return mRankDatas.get(position);
        }

        @Override
        public long getItemId(int position) {
            return position;
        }

        @Override
        public View getView(int position, View convertView, ViewGroup parent) {
            PagerVewHodler holder;
            if (convertView == null){
                holder = new PagerVewHodler();
                convertView = mInflater.inflate(R.layout.item_circle_rank, parent, false);
                holder.mRank = (ImageView) convertView.findViewById(R.id.iv_rank);
                holder.mUserLogo = (ImageView) convertView.findViewById(R.id.user_logo);
                holder.mRankNum = (TextView) convertView.findViewById(R.id.tv_rank_num);
                holder.mTitle = (TextView) convertView.findViewById(R.id.tv_title);
                holder.mTopic = (TextView) convertView.findViewById(R.id.tv_topics_num);
                holder.mLike = (TextView) convertView.findViewById(R.id.tv_like_num);
                holder.mReply = (TextView) convertView.findViewById(R.id.tv_reply_num);
                convertView.setTag(holder);
            }else {
                holder = (PagerVewHodler)convertView.getTag();
            }
            CircleRankData data = getItem(position);
            ImageLoader.getInstance().displayImage(data.getCircleMember().avatar, holder.mUserLogo
                    , ImageLoaderManager.DEFAULT_USER_IMAGE_DISPLAYER);
            holder.mTitle.setText(data.realname);
            holder.mTopic.setText(String.format("话题: %d", data.topics_count));
            holder.mLike.setText(String.format("点赞: %d", data.like_count));
            holder.mReply.setText(String.format("回复: %d", data.comments_count));
            holder.mRank.setVisibility(View.VISIBLE);
            holder.mRankNum.setText(String.valueOf(data.statistics_order));
            if(data.statistics_order == 1){
                holder.mRank.setImageResource(R.mipmap.rank1);
                holder.mRankNum.setTextColor(Color.parseColor("#FFFFFF"));

            }else if(data.statistics_order == 2){
                holder.mRank.setImageResource(R.mipmap.rank2);
                holder.mRankNum.setTextColor(Color.parseColor("#FFFFFF"));
            }else if(data.statistics_order == 3){
                holder.mRank.setImageResource(R.mipmap.rank3);
                holder.mRankNum.setTextColor(Color.parseColor("#FFFFFF"));
            }else {
                holder.mRankNum.setTextColor(Color.parseColor("#999999"));
                holder.mRank.setVisibility(View.GONE);
                //holder.mRankNum.setVisibility(View.GONE);
            }
            if(data.uid == UserServer.getCurrentUser().uid && position == 0){
                holder.mRankNum.setTextColor(Color.parseColor("#999999"));
                holder.mRank.setVisibility(View.GONE);
            }
            return convertView;
        }
    }

    private class PagerVewHodler{

        public ImageView mRank, mUserLogo;
        public TextView mRankNum, mTitle, mTopic, mLike ,mReply;
    }
}
