package com.talenton.organ.ui.feed.video;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.PixelFormat;
import android.graphics.Bitmap.CompressFormat;
import android.hardware.Camera;
import android.hardware.Camera.CameraInfo;
import android.hardware.Camera.Parameters;
import android.hardware.Camera.Size;
import android.media.CamcorderProfile;
import android.media.MediaMetadataRetriever;
import android.media.MediaRecorder;
import android.media.ThumbnailUtils;
import android.media.MediaRecorder.OnErrorListener;
import android.media.MediaRecorder.OnInfoListener;
import android.media.MediaScannerConnection;
import android.os.Bundle;
import android.os.Handler;
import android.os.PowerManager;
import android.provider.MediaStore.Images;
import android.text.TextUtils;
import android.util.Log;
import android.view.KeyEvent;
import android.view.SurfaceHolder;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.WindowManager;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.VideoView;

import com.talenton.organ.BaseCompatActivity;
import com.talenton.organ.R;
import com.talenton.base.util.FileUtil;
import com.talenton.base.util.SystemUtil;
import com.talenton.base.util.XLTToast;
import com.talenton.base.widget.CommonAlertDialog;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Collections;
import java.util.List;

public class RecorderVideoActivity extends BaseCompatActivity implements
		View.OnClickListener, SurfaceHolder.Callback, OnErrorListener,
		OnInfoListener {
	static final int TYPE_OK = 0;
	private final static String CLASS_LABEL = "RecorderVideoActivity";
	private PowerManager.WakeLock mWakeLock;
	private ImageView btnStart;// 开始录制按钮
	private ImageView btnStop;// 停止录制按钮
	private MediaRecorder mediaRecorder;// 录制视频的类
	private VideoView mVideoView;// 显示视频的控件
	String localPath = "";// 录制的视频路径
	private Camera mCamera;
	// 预览的宽高
	private int previewWidth = 480;
	private int previewHeight = 480;
	private int frontCamera = 0;// 0是后置摄像头，1是前置摄像头
	private ImageView iv_flashlight;
	private LinearLayout mClose;
	private LinearLayout mSwitch;
	private LinearLayout mFlashLight;
	private View mOval;
	private TextView chronometer;
	Parameters cameraParameters = null;
	private SurfaceHolder mSurfaceHolder;
	int defaultVideoFrameRate = -1;
	private boolean isOpenFlashLight = false, canOpenFlashLight = false ,canCloseFlashLight = false;
	private boolean isStart = false;
	private Handler mHandler = new Handler();
	private int mSecond = 60;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
				WindowManager.LayoutParams.FLAG_FULLSCREEN);// 设置全屏
		// 选择支持半透明模式，在有surfaceview的activity中使用
		getWindow().setFormat(PixelFormat.TRANSLUCENT);
		setContentView(R.layout.activity_recorder_video);
		PowerManager pm = (PowerManager) getSystemService(Context.POWER_SERVICE);
		mWakeLock = pm.newWakeLock(PowerManager.SCREEN_BRIGHT_WAKE_LOCK,
				CLASS_LABEL);
		mWakeLock.acquire();
		initViews();
	}

	private void initViews() {
		mClose = (LinearLayout) findViewById(R.id.layout_close);
		mClose.setOnClickListener(this);
		mSwitch = (LinearLayout) findViewById(R.id.layout_switch);
		mSwitch.setOnClickListener(this);
		mFlashLight = (LinearLayout) findViewById(R.id.layout_falshlight);
		mFlashLight.setOnClickListener(this);
		iv_flashlight = (ImageView) findViewById(R.id.iv_flashlight);
		mOval = (View) findViewById(R.id.view_oval);
		mVideoView = (VideoView) findViewById(R.id.mVideoView);
		btnStart = (ImageView) findViewById(R.id.recorder_start);
		btnStop = (ImageView) findViewById(R.id.recorder_stop);
		btnStart.setOnClickListener(this);
		btnStop.setOnClickListener(this);
		mSurfaceHolder = mVideoView.getHolder();
		mSurfaceHolder.addCallback(this);
		mSurfaceHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
		chronometer = (TextView) findViewById(R.id.chronometer);
	}

	@Override
	public void onResume() {
		super.onResume();
		if (mWakeLock == null) {
			// 获取唤醒锁,保持屏幕常亮
			PowerManager pm = (PowerManager) getSystemService(Context.POWER_SERVICE);
			mWakeLock = pm.newWakeLock(PowerManager.SCREEN_BRIGHT_WAKE_LOCK,
					CLASS_LABEL);
			mWakeLock.acquire();
		}
	}

	@SuppressLint("NewApi")
	private boolean initCamera() {
		try {
			if (frontCamera == 0) {
				mCamera = Camera.open(CameraInfo.CAMERA_FACING_BACK);
			} else {
				mCamera = Camera.open(CameraInfo.CAMERA_FACING_FRONT);
			}
			Camera.Parameters camParams = mCamera.getParameters();
			List<String> flashModes = camParams.getSupportedFlashModes();
			if(flashModes != null && flashModes.contains(Camera.Parameters.FLASH_MODE_TORCH)){
				canOpenFlashLight = true;
			}
			if(flashModes != null && flashModes.contains(Camera.Parameters.FLASH_MODE_OFF)){
				canCloseFlashLight = true;
			}
			//camParams.setFlashMode(Camera.Parameters.FLASH_MODE_TORCH);
			//mCamera.setParameters(camParams);
			mCamera.lock();
			mSurfaceHolder = mVideoView.getHolder();
			mSurfaceHolder.addCallback(this);
			mSurfaceHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
			mCamera.setDisplayOrientation(90);

		} catch (Exception ex) {
			Log.e("video", "init Camera fail " + ex.getMessage());
			return false;
		}
		return true;
	}

	private void handleSurfaceChanged() {
		if (mCamera == null) {
			XLTToast.makeText(this, "相机加载失败").show();
			finish();
			return;
		}
		
		boolean hasSupportRate = false;
		List<Integer> supportedPreviewFrameRates = mCamera.getParameters()
				.getSupportedPreviewFrameRates();
		if (supportedPreviewFrameRates != null
				&& supportedPreviewFrameRates.size() > 0) {
			Collections.sort(supportedPreviewFrameRates);
			for (int i = 0; i < supportedPreviewFrameRates.size(); i++) {
				int supportRate = supportedPreviewFrameRates.get(i);

				if (supportRate == 30) {
					hasSupportRate = true;
				}

			}
			if (hasSupportRate) {
				defaultVideoFrameRate = 30;
			} else {
				defaultVideoFrameRate = supportedPreviewFrameRates.get(0);
			}

		}
		
		
		// 获取摄像头的所有支持的分辨率
		List<Camera.Size> resolutionList = SystemUtil.getResolutionList(mCamera);
		if (resolutionList != null && resolutionList.size() > 0) {
			Collections.sort(resolutionList, new SystemUtil.ResolutionComparator());
			Camera.Size previewSize = null;
			boolean hasSize = false;
			// 如果摄像头支持640*480，那么强制设为640*480  720*480
			for (int i = 0; i < resolutionList.size(); i++) {
				Size size = resolutionList.get(i);
				if (size != null && size.width == 640 && size.height == 480) {
					previewSize = size;
					previewWidth = previewSize.width;
					previewHeight = previewSize.height;
					hasSize = true;
					break;
				}
			}
			// 如果不支持设为中间的那个
			if (!hasSize) {
				int mediumResolution = resolutionList.size() / 2;
				if (mediumResolution >= resolutionList.size())
					mediumResolution = resolutionList.size() - 1;
				previewSize = resolutionList.get(mediumResolution);
				previewWidth = previewSize.width;
				previewHeight = previewSize.height;

			}

		}

	}

	@Override
	public void onPause() {
		super.onPause();
		stopRecording();
		if (mWakeLock != null) {
			mWakeLock.release();
			mWakeLock = null;
		}
	}

	@Override
	public void onClick(View view) {
		int id = view.getId();
		if(id == R.id.layout_switch){
			switchCamera();
		}
		else if(id == R.id.layout_close){
			closeActivity();
		}
		else if(id == R.id.layout_falshlight){
			openFlashLight();
		}
		else if(id == R.id.recorder_start){
			if (isStart) return;

		    if(!startRecording()){
		    	//XLTToast.makeText(this, "录制失败，停止录像").show();
				finishActivity();
		        return;
		    }
		    mHandler.postDelayed(mRunnable, 1000);
		    isStart = true;
		    mSwitch.setVisibility(View.GONE);
			btnStart.setVisibility(View.GONE);
			mClose.setVisibility(View.GONE);
			mFlashLight.setVisibility(View.GONE);
			btnStart.setEnabled(false);
			btnStop.setVisibility(View.VISIBLE);
			chronometer.setVisibility(View.VISIBLE);
			mOval.setVisibility(View.VISIBLE);
			// 重置其他
		}
		else if(id == R.id.recorder_stop){
			if(mSecond > 57){
				XLTToast.makeText(this, "录制时间不能少于3秒").show();
				//startRecord();
				return;
			}
			sendVideo(1);
		}
	}
	
	Runnable mRunnable = new Runnable(){

		@Override
		public void run() {
			// TODO Auto-generated method stub
			if(!isStart || mSecond == 0)
				return;
			mSecond--;
			if(mSecond < 10)
				chronometer.setText(String.format("00:0%d", mSecond));
			else
				chronometer.setText(String.format("00:%d", mSecond));
			
			mHandler.postDelayed(mRunnable, 1000);
		}
	};
	
	@Override
	public void surfaceChanged(SurfaceHolder holder, int format, int width,
			int height) {
		// 将holder，这个holder为开始在oncreat里面取得的holder，将它赋给surfaceHolder
		mSurfaceHolder = holder;
	}

	@Override
	public void surfaceCreated(SurfaceHolder holder) {
		if (mCamera == null){
			if(!initCamera()){
			    showFailDialog("相机加载失败，是否安装了安全过滤软件，如腾讯、360安全卫士等。"
			    		+ "请先到相应安全软件里开启录相、录音、摄像头等权限。");
			    return;
			}
		}
		try {
			mCamera.setPreviewDisplay(mSurfaceHolder);
			mCamera.startPreview();
			handleSurfaceChanged();
		} catch (Exception e1) {
			Log.e("video", "start preview fail " + e1.getMessage());
			showFailDialog("相机加载失败");
		}
	}

	@Override
	public void surfaceDestroyed(SurfaceHolder arg0) {
		//Log.v("video", "surfaceDestroyed");  
	}

	public boolean startRecording(){
		if (mediaRecorder == null){
			if(!initRecorder()){
				return false;
			}
		}

		mediaRecorder.setOnInfoListener(this);
		mediaRecorder.setOnErrorListener(this);
		try{
			mediaRecorder.start();
		} catch(Exception e){
			XLTToast.makeText(this, "录制视频失败").show();
			//finishActivity();
			return false;
		}
		return true;
	}

	@SuppressLint("NewApi")
	private boolean initRecorder(){
		boolean isExitsSdcard = android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED);
		if(!isExitsSdcard){
			XLTToast.makeText(this, "没有SD卡").show();
		    return false;
		}
	    if(FileUtil.getSDFreeSize()/1024/1024 < 10){ //<10M
	    	FileUtil.deleteFolder(FileUtil.getExternalPath(this, FileUtil.VIDEO_RECORD));
	    	if(FileUtil.getSDFreeSize()/1024/1024 < 10){
	    		XLTToast.makeText(this, "SD卡空间不足，请先清理空间").show();
	    		return false;
	    	}
	    }
		if (mCamera == null) {
			if(!initCamera()){
				XLTToast.makeText(this, "相机加载失败，是否安装了安全过滤软件，如腾讯、360安全卫士等。"
					    		+ "请先到相应安全软件里开启录相、录音、摄像头权限").show();
			    return false;
			}
		}
		mVideoView.setVisibility(View.VISIBLE);
		// TODO init button
		mCamera.stopPreview();
		CamcorderProfile mProfile = CamcorderProfile.get(CamcorderProfile.QUALITY_HIGH);
		mProfile.fileFormat = MediaRecorder.OutputFormat.MPEG_4;
		mProfile.videoCodec = MediaRecorder.VideoEncoder.H264;
		mProfile.videoFrameHeight = previewHeight;
		mProfile.videoFrameWidth = previewWidth;
		/*
		if(mProfile.videoBitRate > (1024*7/10) * 1024){
			mProfile.videoBitRate = (1024*7/10) * 1024;
		}
		*/
		if(mProfile.videoBitRate > (6*1024/5) * 1024){
			mProfile.videoBitRate = (6*1024/5) * 1024;
		}
		//mProfile.videoBitRate = 384 * 1024;
		mediaRecorder = new MediaRecorder();
		mCamera.unlock();
		mediaRecorder.setCamera(mCamera);
		mediaRecorder.setAudioSource(MediaRecorder.AudioSource.DEFAULT);
		// 设置录制视频源为Camera（相机）
		mediaRecorder.setVideoSource(MediaRecorder.VideoSource.CAMERA);
		if (frontCamera == 1) {
			mediaRecorder.setOrientationHint(270);
		} else {
			mediaRecorder.setOrientationHint(90);
		}
		mediaRecorder.setProfile(mProfile);
		/*
		// 设置录制完成后视频的封装格式THREE_GPP为3gp.MPEG_4为mp4
		mediaRecorder.setOutputFormat(MediaRecorder.OutputFormat.MPEG_4);
		mediaRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AAC);
		// 设置录制的视频编码h263 h264
		mediaRecorder.setVideoEncoder(MediaRecorder.VideoEncoder.H264);
		// 设置视频录制的分辨率。必须放在设置编码和格式的后面，否则报错
		mediaRecorder.setVideoSize(previewWidth, previewHeight);
		// 设置视频的比特率
		mediaRecorder.setVideoEncodingBitRate(384 * 1024);
		// // 设置录制的视频帧率。必须放在设置编码和格式的后面，否则报错
		//if (defaultVideoFrameRate != -1) {
		//	mediaRecorder.setVideoFrameRate(defaultVideoFrameRate);
		//}
		*/
		//mediaRecorder.setVideoSize(previewWidth, previewHeight);
		//mediaRecorder.setVideoEncodingBitRate(384 * 1024);
		localPath = String.format("%s/%s.mp4", FileUtil.getExternalPath(this, FileUtil.VIDEO_RECORD).getAbsolutePath(), System.currentTimeMillis());
		mediaRecorder.setOutputFile(localPath);
		mediaRecorder.setMaxDuration(60000);
		mediaRecorder.setPreviewDisplay(mSurfaceHolder.getSurface());
		try {
            mediaRecorder.prepare();
        } catch (Exception e) {
            e.printStackTrace();
            XLTToast.makeText(this, "录制视频失败").show();
            return false;
        }
		return true;
	}

	public void stopRecording() {
		if (mediaRecorder != null) {
			mediaRecorder.setOnErrorListener(null);
			mediaRecorder.setOnInfoListener(null);
			try {
				mediaRecorder.stop();
			} catch (IllegalStateException e) {
				Log.e("video", "stopRecording error:" + e.getMessage());
			}
		}
		releaseRecorder();

		if (mCamera != null) {
			mCamera.stopPreview();
			releaseCamera();
		}
	}

	private void releaseRecorder() {
		if (mediaRecorder != null) {
			mediaRecorder.reset();
			mediaRecorder.release();
			mediaRecorder = null;
		}
	}

	protected void releaseCamera() {
		try {
			if (mCamera != null) {
				mCamera.stopPreview();
				mCamera.release();
				mCamera = null;
			}
		} catch (Exception e) {
		}
	}

	@SuppressLint("NewApi")
	public void switchCamera() {

		if (mCamera == null) {
			return;
		}
		if (Camera.getNumberOfCameras() >= 2) {
			mSwitch.setEnabled(false);
			if (mCamera != null) {
				mCamera.stopPreview();
				mCamera.release();
				mCamera = null;
			}

			switch (frontCamera) {
			case 0:
				mCamera = Camera.open(CameraInfo.CAMERA_FACING_FRONT);
				frontCamera = 1;
				break;
			case 1:
				mCamera = Camera.open(CameraInfo.CAMERA_FACING_BACK);
				frontCamera = 0;
				break;
			}
			try {
				mCamera.lock();
				mCamera.setDisplayOrientation(90);
				mCamera.setPreviewDisplay(mVideoView.getHolder());
				mCamera.startPreview();
			} catch (IOException e) {
				mCamera.release();
				mCamera = null;
			}
			mSwitch.setEnabled(true);

		}
	}
	
	private void openFlashLight(){
		if (mCamera == null || !canOpenFlashLight) {
			return;
		}
		isOpenFlashLight = !isOpenFlashLight;
		Camera.Parameters camParams = mCamera.getParameters();
		if(isOpenFlashLight){
			camParams.setFlashMode(Camera.Parameters.FLASH_MODE_TORCH);
			mCamera.setParameters(camParams);
			iv_flashlight.setImageResource(R.mipmap.camera_flashlight_open);
		}
		else if(canCloseFlashLight){
			camParams.setFlashMode(Camera.Parameters.FLASH_MODE_OFF);
			mCamera.setParameters(camParams);
			iv_flashlight.setImageResource(R.mipmap.camera_flashlight_close);
		}
		
	}

	MediaScannerConnection msc = null;
	ProgressDialog progressDialog = null;

	@SuppressLint("NewApi")
	public void sendVideo(int over) {
		if (TextUtils.isEmpty(localPath)) {
			XLTToast.makeText(this, "录制视频，保存失败").show();
			finishActivity();
			return;
		}
		String path = localPath.substring(0, localPath.lastIndexOf("."));

		String timer = chronometer.getText().toString().replace(":", "");
		if(TextUtils.isEmpty(timer)){
			//XLTToast.makeText(this, "录制时间不能少于3秒").show();
			//startRecord();
			finishActivity();
			return;
		}
		stopRecording();
		int duration = 0;
		if(over == 1){
			isStart = false;
			MediaMetadataRetriever retriever = new MediaMetadataRetriever();
			try{
				retriever.setDataSource(localPath);
				String dur = retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_DURATION);
				duration = Integer.parseInt(dur)/1000;
			}catch(Exception e){
				duration = 0;
			}
			finally {
	            try {
	                retriever.release();
	            }catch (RuntimeException ex) {
	                // Ignore failures while cleaning up.
	            }
	        }
		}
		String seconds = "";
		if(duration == 0){
			duration = 60 - mSecond;
		}
		if(duration < 3){
			//XLTToast.makeText(this, "录制时间不能少于3秒").show();
			//startRecord();
			finishActivity();
			return;
		}

		if(over == 2){
			seconds = "60";
		}else{
			seconds = String.valueOf(duration);
		}
		path = String.format("%sv%s.jpg", path, seconds);
		
		File file = new File(path);
		Bitmap bitmap = null;
		FileOutputStream fos = null;
		try {
			if (!file.getParentFile().exists()) {
				file.getParentFile().mkdirs();
			}
			bitmap = ThumbnailUtils.createVideoThumbnail(localPath, Images.Thumbnails.MINI_KIND);
			if (bitmap == null) {
				Log.d("chatactivity", "problem load video thumbnail bitmap,use default icon");
			}
			else{
				fos = new FileOutputStream(file);
				bitmap.compress(CompressFormat.JPEG, 100, fos);
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (fos != null) {
				try {
					fos.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
				fos = null;
			}
			if (bitmap != null) {
				bitmap.recycle();
				bitmap = null;
			}
		}
		Intent intent = new Intent();
		intent.putExtra("imagevideo", path);
		intent.putExtra("video", localPath);
		intent.putExtra("timer", seconds);
		setResult(Activity.RESULT_OK, intent);
		finish();
		/*
		if(msc == null)
    		msc = new MediaScannerConnection(this,
    				new MediaScannerConnectionClient() {
    
    					@Override
    					public void onScanCompleted(String path, Uri uri) {
    						Log.d(TAG, "scanner completed");
    						msc.disconnect();
    						progressDialog.dismiss();
    						setResult(RESULT_OK, getIntent().putExtra("uri", uri));
    						finish();
    					}
    
    					@Override
    					public void onMediaScannerConnected() {
    					    Log.d("localPath:", localPath);
    						msc.scanFile(localPath, "video/*");
    					}
    				});
		
		
		if(progressDialog == null){
		    progressDialog = new ProgressDialog(this);
		    progressDialog.setMessage("processing...");
		    progressDialog.setCancelable(false);
		}
		progressDialog.show();
		msc.connect();
		*/
	}

	@Override
	public void onInfo(MediaRecorder mr, int what, int extra) {
		//Log.v("video", "onInfo");
		if (what == MediaRecorder.MEDIA_RECORDER_INFO_MAX_DURATION_REACHED) {
			//Log.v("video", "max duration reached");
			btnStop.setEnabled(false);
			sendVideo(2);
		}

	}

	@Override
	public void onError(MediaRecorder mr, int what, int extra) {
		XLTToast.makeText(this, "录制失败，停止录像").show();
		finishActivity();
	}

	@Override
	protected void onDestroy() {
		super.onDestroy();
		stopRecording();

		if (mWakeLock != null) {
			mWakeLock.release();
			mWakeLock = null;
		}

	}
	
	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		if (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {
			finishActivity();
		}
		return super.onKeyDown(keyCode, event);
	}
	
	private void finishActivity(){
		stopRecording();
		isStart = false;
		if (!TextUtils.isEmpty(localPath)){
			File file = new File(localPath);
			if(file.exists())
				file.delete();
		}
		finish();
	}
	
	private void startRecord(){
		frontCamera = 0;
		//switchCamera();
		stopRecording();
		isStart = false;
		mSecond = 60;
		if (!TextUtils.isEmpty(localPath)){
			File file = new File(localPath);
			if(file.exists())
				file.delete();
		}
		isOpenFlashLight = false;
		if(canCloseFlashLight){
			iv_flashlight.setImageResource(R.mipmap.camera_flashlight_close);
		}
		chronometer.setText("00:60");
		mHandler.removeCallbacks(mRunnable);
	    mSwitch.setVisibility(View.VISIBLE);
		btnStart.setVisibility(View.VISIBLE);
		mClose.setVisibility(View.VISIBLE);
		mFlashLight.setVisibility(View.VISIBLE);
		btnStart.setEnabled(true);
		btnStop.setEnabled(true);
		btnStop.setVisibility(View.GONE);
		chronometer.setVisibility(View.GONE);
		mOval.setVisibility(View.GONE);
		initCamera();
	}

	private void showFailDialog(String msg) {
		showDialog(msg);
	}
	
	private void showDialog(String msg){
		final CommonAlertDialog dialog = new CommonAlertDialog(this);
		dialog.setMessage(msg);
		dialog.setNegativeButton("确定", new OnClickListener() {
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				dialog.dismiss();
				finish();
			}
		});
		dialog.show();
	}
	
	private void closeActivity() {
		// TODO Auto-generated method stub
		finishActivity();
		/*
		if(!isStart){
			finishActivity();
			return;
		}
		
		final CommonAlertDialog dialog = new CommonAlertDialog(this);
		dialog.setMessage("确定放弃这段视频？");
		dialog.setNegativeButton("确定", new OnClickListener() {
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				dialog.dismiss();
				finishActivity();
			}
		});
		dialog.setPositiveButton("取消", new OnClickListener() {
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				dialog.dismiss();
			}
		});
		dialog.show();
		*/
	}
}