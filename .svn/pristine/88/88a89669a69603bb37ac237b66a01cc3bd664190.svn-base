package com.talenton.organ.ui.school;

import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.text.TextUtils;
import android.view.LayoutInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;

import com.talenton.organ.BaseListActivity;
import com.talenton.organ.R;
import com.talenton.base.dao.model.SearchCacheBean;
import com.talenton.base.server.XLTError;
import com.talenton.base.server.XLTResponseListener;
import com.talenton.base.util.NetWorkUtils;
import com.talenton.base.widget.NoScrollGridView;
import com.talenton.organ.server.SchoolCacheServer;
import com.talenton.organ.server.SchoolServer;
import com.talenton.organ.server.bean.school.BaseRspList;
import com.talenton.organ.server.bean.school.ClassData;
import com.talenton.organ.server.bean.school.ReqClassList;
import com.talenton.organ.server.bean.school.RspListSearchHot;
import com.talenton.organ.server.bean.school.event.JoinClassEvent;
import com.talenton.organ.ui.school.adapter.BaseClassListAdapter;
import com.talenton.organ.ui.school.adapter.ClassAdapter;
import com.talenton.organ.ui.school.adapter.SearchHistoryAdapter;
import com.talenton.organ.ui.school.adapter.SearchHotAdapter;
import com.talenton.organ.ui.school.adapter.SearchResultAdapterMy;
import com.talenton.organ.widget.SearchView;
import com.talenton.organ.widget.dialog.TipsDialog;

import org.greenrobot.eventbus.EventBus;
import org.greenrobot.eventbus.Subscribe;
import org.greenrobot.eventbus.ThreadMode;

import java.util.ArrayList;
import java.util.List;

public class SearchActivity extends BaseListActivity implements View.OnClickListener, AdapterView.OnItemClickListener {
    private NoScrollGridView gv_hot;
    private SearchHotAdapter hotAdapter;
    private ListView lv_history;
    private TextView tv_clean;
    private SearchView search_view;
    private SchoolServer schoolServer;
    private List<String> hotList; //热门列表数据
    private List<ClassData> searchResultData; //搜索结果列表
    private ReqClassList reqClassList; //请求对象
    private static final String SEARCH_DATA = "search_data";
    private LinearLayout ll_search_content;
    private LinearLayout ll_hot;
    private boolean isGlobalSearch; //是否为全局搜索
    private ArrayList<SearchCacheBean> searchCacheBeans; //历史搜索数据
    private SearchHistoryAdapter searchHistoryAdapter;
    private TipsDialog tipsDialog;
    private int currentClickPosition;


    public static void startSearchActivity(Context context){
        Intent intent = new Intent(context,SearchActivity.class);
        context.startActivity(intent);
    }

    public static void startSearchActivity(Context context,ReqClassList reqClassList){
        Intent intent = new Intent(context,SearchActivity.class);
        intent.putExtra(SEARCH_DATA, reqClassList);
        context.startActivity(intent);
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_school_search);

        initView();
        fillData();
        EventBus.getDefault().register(this);
    }

    private void fillData() {
        searchResultData = new ArrayList<>();
        schoolServer = new SchoolServer();

        fillSearchResultList();
        fillHostList();
        fillHistroyList();

        if (!isGlobalSearch){
            ll_search_content.setVisibility(View.VISIBLE);
            ll_hot.setVisibility(View.GONE);
            mPullRefreshListView.setVisibility(View.GONE);
        }else {
            showResultView(false);
        }
    }

    private void fillSearchResultList() {
        reqClassList = getIntent().getParcelableExtra(SEARCH_DATA);
        if (reqClassList == null){
            isGlobalSearch = true;
            if (isTeacher()){ //设置搜索范围
                reqClassList = new ReqClassList(ReqClassList.ClassListType.ALL);
            }else {
                reqClassList = new ReqClassList(ReqClassList.ClassListType.LSG);
            }
        }else {
            //清除筛选字段
            isGlobalSearch = false;
            reqClassList.cleanFilterField();
        }
        mAdapter = new SearchResultAdapterMy(this,searchResultData);
        mPullRefreshListView.setAdapter(mAdapter);
    }

    /**
     * 填充热门数据
     */
    private void fillHostList() {
        hotList = new ArrayList<>();
        hotAdapter = new SearchHotAdapter(this,hotList);
        gv_hot.setAdapter(hotAdapter);
        gv_hot.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                String searchTitle = hotAdapter.getItem(position);
                search_view.setSearchText(searchTitle);
                hideSoftInput(search_view);
                reqClassList.setTitle(searchTitle);
                startSearchData(reqClassList);
            }
        });
        schoolServer.getSearchHotList(new XLTResponseListener<RspListSearchHot>() {
            @Override
            public void onResponse(RspListSearchHot responseData, XLTError errorData) {
                if (errorData == null) {
                    hotAdapter.addAll(responseData.getList());
                    hotAdapter.notifyDataSetChanged();
                }
            }
        });
    }

    /**
     * 填充搜索历史数据
     */
    private void fillHistroyList() {
        View footerView = LayoutInflater.from(this).inflate(R.layout.item_school_search_footer,null);
        View clean_divider_line = footerView.findViewById(R.id.clean_divider_line);
        tv_clean = (TextView) footerView.findViewById(R.id.tv_clean);
        tv_clean.setOnClickListener(this);
        lv_history.addFooterView(footerView);

        List<SearchCacheBean> cacheData = SchoolCacheServer.getInstance().getSearchCache(SearchCacheBean.TYPE_SCHOOL_SEARCH);
        if (cacheData != null && !cacheData.isEmpty()){
            clean_divider_line.setVisibility(View.GONE);
            searchCacheBeans = (ArrayList<SearchCacheBean>) cacheData;
        }
        if (searchCacheBeans == null){
            searchCacheBeans = new ArrayList<>();
        }

        lv_history.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                SearchCacheBean searchCacheBean = searchHistoryAdapter.getItem(position);
                search_view.setSearchText(searchCacheBean.getSearchText());
                hideSoftInput(search_view);
                reqClassList.setTitle(searchCacheBean.getSearchText());
                startSearchData(reqClassList);
            }
        });
        searchHistoryAdapter = new SearchHistoryAdapter(this,searchCacheBeans);
        searchHistoryAdapter.setCleanDividerLine(clean_divider_line);
        search_view.setHistroyAdapter(searchHistoryAdapter);
        lv_history.setAdapter(searchHistoryAdapter);
    }

    /**
     * 是否显示搜索结果view
     * @param isShow
     */
    public void showResultView(boolean isShow){
        if (isShow){
            ll_search_content.setVisibility(View.GONE);
            mPullRefreshListView.setVisibility(View.VISIBLE);
        }else {
            ll_search_content.setVisibility(View.VISIBLE);
            mPullRefreshListView.setVisibility(View.GONE);
        }
    }

    private void initView() {
        ll_search_content = (LinearLayout) findViewById(R.id.ll_search_content);
        ll_hot = (LinearLayout) findViewById(R.id.ll_hot);
        gv_hot = (NoScrollGridView) findViewById(R.id.gv_hot);
        lv_history = (ListView) findViewById(R.id.list);
        search_view = (SearchView) findViewById(R.id.search_view);
        search_view.setSearchType(SearchCacheBean.TYPE_SCHOOL_SEARCH);
//        search_view.setOnClickHistroyItemListener(new SearchView.OnClickHistroyItemListener() {
//            @Override
//            public void ClickHistroyItem(String searchText, int position) {
//                reqClassList.setTitle(searchText);
//                search_view.hideHistroyPop();
//                startSearchData(reqClassList);
//            }
//        });
        search_view.setOnSearchCallback(new SearchView.OnSearchCallback() {
            @Override
            public void searchCallback(String searchText) {
                if (!NetWorkUtils.isNetworkAvailable(SearchActivity.this)) {
                    showShortToast(getString(R.string.main_disable_network));
                    return;
                }
                if (!searchText.isEmpty()) {
                    showResultView(true);
                    reqClassList.setTitle(searchText);
                    startSearchData(reqClassList);
                } else {
                    showShortToast("搜索内容不能为空");
                }
            }
        });
        search_view.setOnTextChanged(new SearchView.OnTextChanged() {
            @Override
            public void textChange(CharSequence s, int start, int before, int count) {
                if (TextUtils.isEmpty(s)){
                    showResultView(false);
                }
            }
        });
        mPullRefreshListView.setOnItemClickListener(this);
    }

    private void startSearchData(ReqClassList reqClassList) {
        startGetData(new SchoolServer.SchoolClassListServer(reqClassList), new ListResponseCallback() {
            @Override
            public void onSuccess(BaseRspList data) {
                if (data.getList() != null) {
                    if (data.getList().isEmpty()) {
                        showShortToast("没有符合条件的结果");
                    } else {
                        mAdapter.clear();
                        mAdapter.addAll(data.getList());
                        mAdapter.notifyDataSetChanged();
                    }
                }
            }

            @Override
            public void onError(XLTError error) {

            }
        });
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()){
            case R.id.tv_clean:
                //清除历史记录
                if (tipsDialog == null){
                    tipsDialog = new TipsDialog();
                    tipsDialog.setMsg(getString(R.string.dialog_clean_histroy));
                    tipsDialog.setOnClickRightBtnListener(new TipsDialog.OnClickRightBtnListener() {
                        @Override
                        public void onClick(View v) {
                            SchoolCacheServer.getInstance().clearnSearchCacheData(SearchCacheBean.TYPE_SCHOOL_SEARCH);
                            searchHistoryAdapter.clear();
                            searchHistoryAdapter.notifyDataSetChanged();
                        }
                    });
                }
                tipsDialog.show(getSupportFragmentManager(),"cleanDialog");
                break;
        }
    }

    @Override
    protected int getPullRefreshListViewResId() {
        return R.id.result_list;
    }

    @Override
    protected int getMenuResourceId() {
        return R.menu.school_class_cancel;
    }

    @Override
    protected void onRightClick(MenuItem item) {
        if (item.getItemId() == R.id.cancel_action){
            finish();
        }
    }

    @Override
    protected void onDestroy() {
        EventBus.getDefault().unregister(this);
        super.onDestroy();
    }

    @Override
    protected int getTitleResourceId() {
        return R.string.school_text_search;
    }

    @Override
    protected int getLeftImageResourceId() {
        return 0;
    }

    @Override
    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
        position = position - mPullRefreshListView.getRefreshableView().getHeaderViewsCount();
        currentClickPosition = position;
        ClassData classData = (ClassData) mAdapter.getItem(position);
        ClassDetailActivity.startClassDetailActivity(this,classData.getAid(),position);
    }

    @Subscribe(threadMode = ThreadMode.MAIN)
    public void onEventMainThread(JoinClassEvent joinClassEvent) {
        if (joinClassEvent == null){
            return;
        }
        int position = joinClassEvent.getPosition();
        if (position != -1 && position == currentClickPosition){
            int currentJoincount = ((BaseClassListAdapter)mAdapter).getDatas().get(position).getJoincount();
            ((BaseClassListAdapter)mAdapter).getDatas().get(position).setJoincount(currentJoincount + 1);
            mAdapter.notifyDataSetChanged();
        }
    }

}
