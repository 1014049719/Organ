package com.talenton.organ.ui.user;

import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.text.TextUtils;
import android.view.MenuItem;
import android.view.View;
import android.widget.EditText;
import android.widget.TextView;

import com.talenton.organ.BaseCompatActivity;
import com.talenton.organ.R;
import com.talenton.base.server.UserServer;
import com.talenton.base.server.XLTError;
import com.talenton.base.server.XLTResponseCallback;
import com.talenton.base.server.bean.ObjectCode;
import com.talenton.base.util.XLTToast;
import com.talenton.base.widget.CommonAlertDialog;
import com.talenton.organ.event.DeleteRelationEvent;
import com.talenton.organ.event.ModifyRelationEvent;
import com.talenton.organ.server.FeedServer;
import com.talenton.organ.server.MineServer;
import com.talenton.organ.server.bean.feed.MineCircle;
import com.talenton.organ.server.bean.user.FamilyData;
import com.talenton.organ.server.bean.user.SchoolBabyData;

import org.greenrobot.eventbus.EventBus;

public class ModifyFamilyActivity extends BaseCompatActivity implements View.OnClickListener{

    private static final int REQUEST_CODE_SELECT = 201;
    private static final int REQUEST_CODE_AUTHORITY = 202;
    private FamilyData mData;
    private int mOldAttentionType;

    private TextView mgxNameView, mAttentionView;
    private EditText mNameView;

    public static void startModifyFamilyActivity(Context context, FamilyData data){
        if (data == null) return;
        Intent intent = new Intent(context, ModifyFamilyActivity.class);
        intent.putExtra("family", data);
        context.startActivity(intent);
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        Intent intent = getIntent();
        mData = (FamilyData) intent.getParcelableExtra("family");

        setContentView(R.layout.activity_modify_family);

        mOldAttentionType = mData.attentionType;

        mNameView = (EditText)findViewById(R.id.name);
        mgxNameView = (TextView)findViewById(R.id.relation);
        mAttentionView = (TextView)findViewById(R.id.attentionType);
        mNameView.setText(mData.relname);
        mgxNameView.setText(mData.gxName);

        findViewById(R.id.save_ok).setOnClickListener(this);
        findViewById(R.id.layout_relation).setOnClickListener(this);

        int attentionType = UserServer.getCurrentUser().attentionType.get((int)mData.circleId);
        if (attentionType == MineCircle.ATTENTION_TYPE_CREATE){
            findViewById(R.id.layout_attention).setOnClickListener(this);
        }

        if (mData.attentionType == MineCircle.ATTENTION_TYPE_CREATE){
            mAttentionView.setText("圈主");
            findViewById(R.id.layout_attention).setOnClickListener(null);
        }else if(mData.attentionType == MineCircle.ATTENTION_TYPE_ADMIN){
            mAttentionView.setText("管理员");
        }else {
            mAttentionView.setText("普通亲友");
        }
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()){
            case R.id.save_ok:

                final String name = mgxNameView.getText().toString();
                if (TextUtils.isEmpty(name)){
                    XLTToast.makeText(this, R.string.family_with_baby_relation_hint).show();
                    return;
                }
                showProgress(R.string.main_processing);
                if (mOldAttentionType != mData.attentionType){
                    MineServer.modifyFamilyAuthority(mData.circleId, mData.uid, mData.attentionType, null);
                }
                MineServer.modifyRelationBaby(mData.uid, mData.babyid, mData.gxid, name, new XLTResponseCallback<ObjectCode>() {
                    @Override
                    public void onResponse(ObjectCode data, XLTError error) {
                        hideProgress();
                        if (error == null && data != null){
                            EventBus.getDefault().post(new ModifyRelationEvent(mData.memberId, mData.attentionType, mData.gxid, name));
                            //finish();
                            XLTToast.makeText(ModifyFamilyActivity.this, R.string.main_modify_success).show();
                        }else {
                            XLTToast.makeText(ModifyFamilyActivity.this, R.string.main_modify_fail).show();
                        }
                    }
                });
                break;
            case R.id.layout_relation:
                Intent intent = new Intent(this, SelectRelationActivity.class);
                intent.putExtra("gxid", mData.gxid);
                intent.putExtra("gxname", mData.gxName);
                startActivityForResult(intent, REQUEST_CODE_SELECT);
                break;
            case R.id.layout_attention:
                Intent intent2 = new Intent(this, AttentionTypeActivity.class);
                intent2.putExtra("attentionType", mData.attentionType);
                startActivityForResult(intent2, REQUEST_CODE_AUTHORITY);
                break;
        }
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        switch (requestCode) {
            case REQUEST_CODE_SELECT:
                if (data != null && resultCode == RESULT_OK){
                    mData.gxid = data.getIntExtra("relationId", 0);
                    mgxNameView.setText(data.getStringExtra("relationName"));
                }
                break;
            case REQUEST_CODE_AUTHORITY:
                if (data != null && resultCode == RESULT_OK){
                    mData.attentionType = data.getIntExtra("attentionType", 0);
                    mAttentionView.setText(data.getStringExtra("authorityName"));
                }
                break;
        }
    }

    @Override
    protected void onRightClick(MenuItem item) {
        if(mData.attentionType == MineCircle.ATTENTION_TYPE_ADMIN){
            XLTToast.makeText(this, "不能删除管理员，请先把亲友设置为普通亲友，然后保存，再删除").show();
            return;
        }
        final CommonAlertDialog mAlertDlg = new CommonAlertDialog(this);
        mAlertDlg.setTitle(R.string.main_prompt);
        mAlertDlg.setCancelable(false);
        mAlertDlg.setNegativeButton(getString(android.R.string.no), new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                mAlertDlg.dismiss();
            }
        });
        mAlertDlg.setMessage(R.string.alter_family_delete);
        mAlertDlg.setPositiveButton(getString(android.R.string.yes), new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                showProgress(R.string.main_processing);
                FeedServer.attentionOrCancelCircle(mData.circleId, mData.uid, 0, false, new XLTResponseCallback<ObjectCode>() {
                    @Override
                    public void onResponse(ObjectCode data, XLTError error) {
                        hideProgress();
                        if (error == null) {
                            EventBus.getDefault().post(new DeleteRelationEvent(mData.memberId));
                            XLTToast.makeText(ModifyFamilyActivity.this, R.string.main_delete_success).show();
                            finish();
                        } else {
                            XLTToast.makeText(ModifyFamilyActivity.this, R.string.main_delete_fail).show();
                        }
                    }
                });
            }
        });
        mAlertDlg.show();
    }

    @Override
    protected int getTitleResourceId() {
        return R.string.fill_relation_modify;
    }

    @Override
    protected int getMenuResourceId() {
        if (mData.uid == UserServer.getCurrentUser().uid){
            return 0;
        }
        int attentionType = UserServer.getCurrentUser().attentionType.get((int)mData.circleId);
        if (attentionType == MineCircle.ATTENTION_TYPE_CREATE
                || attentionType == MineCircle.ATTENTION_TYPE_ADMIN){
            return R.menu.menu_delete;
        }
        return 0;
    }
}
