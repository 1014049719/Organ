package com.talenton.organ.ui.shop;
import android.app.Activity;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.pingplusplus.android.PaymentActivity;
import com.talenton.organ.BaseCompatActivity;
import com.talenton.organ.R;
import com.talenton.base.server.XLTError;
import com.talenton.base.server.XLTResponseCallback;
import com.talenton.base.widget.ImageTextButton;
import com.talenton.organ.event.PayCommentEvent;
import com.talenton.organ.server.ShopServer;
import com.talenton.organ.server.bean.shop.AdressInfo;
import com.talenton.organ.server.bean.shop.GoodsCartInfo;
import com.talenton.organ.server.bean.shop.GoodsOrderInfo;
import com.talenton.organ.server.bean.shop.PayOkShowData;
import com.talenton.organ.server.bean.shop.RecvListAdressData;
import com.talenton.organ.server.bean.shop.RecvPayGetOrderData;
import com.talenton.organ.server.bean.shop.SendListAdressData;
import com.talenton.organ.server.bean.shop.SendPayByOrderData;
import com.talenton.organ.server.bean.shop.SendPayGetOrderData;
import com.talenton.organ.server.bean.shop.SendUpdateOrderData;
import com.talenton.organ.ui.shop.adapter.GoodsCartAdapter;

import org.greenrobot.eventbus.EventBus;
import org.json.JSONException;
import org.json.JSONObject;

import java.math.BigDecimal;
import java.util.ArrayList;

/**
 * Created by xiaoxiang on 2016/4/7.
 */

/*
接口给后端，后端返回charge
 */
public class ConfirmOrderActivity extends BaseCompatActivity implements View.OnClickListener{


    private ListView mListView;
    private GoodsCartAdapter mAdapter;

    private Button mButton;
    private LinearLayout address_LinearLayout;
    private LinearLayout LinearLayout_shop_confirm_order_list_view;
    private LinearLayout LinearLayout_shop_picture;
    private ArrayList<AdressInfo> mAdressInfoList;
    private AdressInfo mDefautAdress;
    private ArrayList<GoodsCartInfo> mGoodsCartInfoList;

    private GoodsOrderInfo mGoodsOrderInfo;
    private TextView addressName;
    private TextView addressNumber;
    private TextView addressDetail;
    private int payType;
    private ImageButton shop_select_weixin;
    private ImageButton shop_select_alipay;
    private LinearLayout shop_pay_ali;
    private LinearLayout shop_pay_weixin;
    private static final int REQUEST_CODE_PAYMENT_PAY = 1;
    String orderid;
    private static boolean bOrderSn;//用订单号付款
    private TextView shop_cart_money;
    private double price;
    private static final int REQUEST_CODE_SELECT_ADDRESS=2;
    private static final int REQUEST_CODE_ADD_ADDRESS=3;
    private PayOkShowData mPayOkShowData;
    @Override
    protected void onCreate(Bundle savedInstanceState) {

        setContentView(R.layout.activity_shop_confirm_order);
        super.onCreate(savedInstanceState);
        if(bOrderSn){
            mGoodsOrderInfo = new GoodsOrderInfo();
            mGoodsOrderInfo = (GoodsOrderInfo) getIntent().getExtras().getSerializable("mSelectedOrder");
            mGoodsCartInfoList = new ArrayList<GoodsCartInfo>();
            mGoodsCartInfoList = (ArrayList<GoodsCartInfo>) getIntent().getExtras().getSerializable("mSelected");
        }else {
            mGoodsCartInfoList = new ArrayList<GoodsCartInfo>();
            mGoodsCartInfoList = (ArrayList<GoodsCartInfo>) getIntent().getExtras().getSerializable("mSelected");
        }
        initView();
        getAdressList();

    }

    public static void startConfirmOrderActivity(Context context, ArrayList<GoodsCartInfo> mGoodsCartInfoList){
        bOrderSn=false;
        Intent intent=new Intent();
        Bundle bundle = new Bundle();
        bundle.putSerializable("mSelected", mGoodsCartInfoList);
        intent.putExtras(bundle);
        intent.setClass(context, ConfirmOrderActivity.class);
        context.startActivity(intent);
    }

    public static void startConfirmOrderActivity(Context context, ArrayList<GoodsCartInfo> mGoodsCartInfoList, GoodsOrderInfo mGoodsOrderInfo){
        bOrderSn=true;
        Intent intent=new Intent();
        Bundle bundle = new Bundle();
        bundle.putSerializable("mSelected", mGoodsCartInfoList);
        bundle.putSerializable("mSelectedOrder", mGoodsOrderInfo);
        intent.putExtras(bundle);
        intent.setClass(context, ConfirmOrderActivity.class);
        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        context.startActivity(intent);
    }

    public static double multiply(double v1, double v2)
    {
        BigDecimal b1 = new BigDecimal(Double.toString(v1));
        BigDecimal b2 = new BigDecimal(Double.toString(v2));
        return b1.multiply(b2).doubleValue();
    }
    public static double add(double v1, double v2)
    {
        BigDecimal b1 = new BigDecimal(Double.toString(v1));
        BigDecimal b2 = new BigDecimal(Double.toString(v2));
        return b1.add(b2).doubleValue();
    }

    /**
     * 初始化view
     * @param
     */
    private void initView() {

        mListView=(ListView)findViewById(R.id.shop_confirm_order_list_view);
        mListView.setSelector(new ColorDrawable(Color.TRANSPARENT));
        mAdapter = new GoodsCartAdapter(this);
        mListView.setAdapter(mAdapter);

        mAdapter.setData(mGoodsCartInfoList);
        mButton=(Button)findViewById(R.id.shopping_buy);
        mButton.setOnClickListener(this);
        address_LinearLayout=(LinearLayout)findViewById(R.id.address_LinearLayout);
        address_LinearLayout.setOnClickListener(this);
        LinearLayout_shop_confirm_order_list_view=(LinearLayout)findViewById(R.id.LinearLayout_shop_confirm_order_list_view);
        LinearLayout_shop_picture=(LinearLayout)findViewById(R.id.LinearLayout_shop_picture);
        mAdressInfoList=new ArrayList<AdressInfo>();
        mDefautAdress=new AdressInfo();
        mPayOkShowData=new PayOkShowData();

        addressName=(TextView)findViewById(R.id.address_name);
        addressNumber=(TextView)findViewById(R.id.address_number);
        addressDetail=(TextView)findViewById(R.id.address_detail);
        payType=2;//默认微信
        shop_select_weixin=(ImageButton)findViewById(R.id.shop_select_weixin);
        shop_select_alipay=(ImageButton)findViewById(R.id.shop_select_zhifubao);

        shop_pay_ali=(LinearLayout)findViewById(R.id.shop_pay_ali);
        shop_pay_weixin=(LinearLayout)findViewById(R.id.shop_pay_wx);
        shop_pay_weixin.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                shop_select_weixin.setBackgroundResource(R.mipmap.icon_shop_cart_select);
                shop_select_alipay.setBackgroundResource(R.mipmap.icon_shop_cart_not_select);
                payType=2;
            }
        });
        shop_pay_ali.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                shop_select_alipay.setBackgroundResource(R.mipmap.icon_shop_cart_select);
                shop_select_weixin.setBackgroundResource(R.mipmap.icon_shop_cart_not_select);
                payType=1;
            }
        });

        shop_cart_money=(TextView)findViewById(R.id.shop_cart_money);
        price =0;
        if(bOrderSn){
            price=mGoodsOrderInfo.total_price;
        }else {
            double tempmultiply=0;
            for (int i = 0; i < mGoodsCartInfoList.size(); i++) {
                tempmultiply =multiply(mGoodsCartInfoList.get(i).goods_price,mGoodsCartInfoList.get(i).goods_number);
                price = add(price, tempmultiply);
          //      price += mGoodsCartInfoList.get(i).goods_price * mGoodsCartInfoList.get(i).goods_number;
            }
        }
        shop_cart_money.setText("￥"+String.valueOf(price));
        mPayOkShowData.price=price;

        if(bOrderSn){
            address_LinearLayout.setVisibility(View.GONE);
            LinearLayout_shop_confirm_order_list_view.setVisibility(View.GONE);
            LinearLayout_shop_picture.setVisibility(View.GONE);
        }



    }
    @Override
    protected int getTitleResourceId() {
        return R.string.shop_text_confirm_order;
    }

    private  void getAdressList(){
        showProgress("正在获取地址数据，请等待");
        SendListAdressData mSendListAdressData= new SendListAdressData();
        ShopServer.getAdressListData(mSendListAdressData,
                new XLTResponseCallback<RecvListAdressData>() {

                    @Override
                    public void onResponse(RecvListAdressData data, XLTError error) {

                        // TODO Auto-generated method stub

                        if ((error == null) && (data != null)) {

                            mAdressInfoList = data.list;
                            if (findDefaultAddress(mAdressInfoList)) {

                            } else {
                                Toast.makeText(getApplicationContext(), "你还没有填写收货地址", Toast.LENGTH_SHORT).show();
                                Intent intent=new Intent();
                                intent.setClass(ConfirmOrderActivity.this, AddNewAdressActivity.class);
                                startActivityForResult(intent, REQUEST_CODE_ADD_ADDRESS);

                            }
                        } else if (error != null) {

                            Toast.makeText(getApplicationContext(), error.getMesssage(), Toast.LENGTH_SHORT).show();
                            finish();
                        }else {
                            Toast.makeText(getApplicationContext(), "地址返回空值", Toast.LENGTH_SHORT).show();
                            finish();
                        }
                        hideProgress();

                    }


                });
    }

    private  void getShowAdressList(){
        showProgress("正在更新地址数据，请等待");
        SendListAdressData mSendListAdressData= new SendListAdressData();
        ShopServer.getAdressListData(mSendListAdressData,
                new XLTResponseCallback<RecvListAdressData>() {

                    @Override
                    public void onResponse(RecvListAdressData data, XLTError error) {

                        // TODO Auto-generated method stub

                        if ((error == null) && (data != null)) {

                            mAdressInfoList.clear();
                            mAdressInfoList = data.list;
                            if (comPareDefaultAddress(mAdressInfoList)) {

                            } else {
                                addressName.setText(null);
                                addressNumber.setText(null);
                                addressDetail.setText(null);

                            }
                        } else if (error != null) {

                            Toast.makeText(getApplicationContext(), error.getMesssage(), Toast.LENGTH_SHORT).show();

                        }else {
                            Toast.makeText(getApplicationContext(), "地址返回空值", Toast.LENGTH_SHORT).show();

                        }
                        hideProgress();

                    }


                });
    }

    private boolean comPareDefaultAddress(ArrayList<AdressInfo> mAdressInfoList){

        for(int i=0;i<mAdressInfoList.size();i++){
            if((mAdressInfoList.get(i).consignee.equals(mDefautAdress.consignee))&&
                    (mAdressInfoList.get(i).mobile.equals(mDefautAdress.mobile))&&
                    (mAdressInfoList.get(i).address.equals(mDefautAdress.address))&&
                    (mAdressInfoList.get(i).area.equals(mDefautAdress.area))){
                return true;
            }
        }

        return false;
    }
    private boolean findDefaultAddress(ArrayList<AdressInfo> mAdressInfoList){

        for(int i=0;i<mAdressInfoList.size();i++){
            if(mAdressInfoList.get(i).is_default==1){
                mDefautAdress=mAdressInfoList.get(i);
                addressName.setText(mDefautAdress.consignee);
                addressNumber.setText(mDefautAdress.mobile);
                addressDetail.setText(mDefautAdress.area+mDefautAdress.address);
                mPayOkShowData.consignee=mDefautAdress.consignee;
                mPayOkShowData.mobile=mDefautAdress.mobile;
                mPayOkShowData.area=mDefautAdress.area;
                mPayOkShowData.address=mDefautAdress.address;
                return true;
            }
        }
        if(mAdressInfoList.size()>0){
            mDefautAdress=mAdressInfoList.get(0);
            addressName.setText(mDefautAdress.consignee);
            addressNumber.setText(mDefautAdress.mobile);
            addressDetail.setText(mDefautAdress.area+mDefautAdress.address);
            mPayOkShowData.consignee=mDefautAdress.consignee;
            mPayOkShowData.mobile=mDefautAdress.mobile;
            mPayOkShowData.area=mDefautAdress.area;
            mPayOkShowData.address=mDefautAdress.address;
            return true;
        }
        return false;
    }

    public boolean bHaveAddress() {
        if (addressName.getText().toString().trim().length() == 0) {
            Toast.makeText(getApplicationContext(), "你还没有填写收货地址", Toast.LENGTH_SHORT).show();
            Intent intent=new Intent();
            intent.setClass(ConfirmOrderActivity.this, AddNewAdressActivity.class);
            startActivityForResult(intent, REQUEST_CODE_ADD_ADDRESS);
            return false;
        }
        return true;
    }
    public void PaymentTask () {

        if(!bHaveAddress()){
            return;
        }
        Toast.makeText(this, "正在获取后端charge数据，请稍后", Toast.LENGTH_SHORT).show();
        showProgress("正在获取后端charge数据，请等待");
        //按键点击之后的禁用，防止重复点击
        mButton.setOnClickListener(null);
        /*
        mDefautAdress.is_default=1;
        mDefautAdress.address="ggyuggfdd";
        mDefautAdress.consignee="fghyff";
        mDefautAdress.area="甘肃省酒泉市肃北蒙古族自治县";
        mDefautAdress.mobile="18620519838";
        */
        SendPayGetOrderData mSendPayGetOrderData= new SendPayGetOrderData(mDefautAdress,payType,mGoodsCartInfoList);
        ShopServer.getPayOrdercharge(mSendPayGetOrderData,
                new XLTResponseCallback<JSONObject>() {


                    @Override
                    public void onResponse(JSONObject data, XLTError error) {

                        // TODO Auto-generated method stub
                        hideProgress();
                        if ((error==null)&&(data != null)) {

                            try{
                            orderid= data.getString("orderid");

                            pay(data.getString("charge"));
                            }
                            catch (JSONException e) {
                                // TODO Auto-generated catch block

                                e.printStackTrace();
                            }
                        } else if(error!=null){

                            String a=error.getMesssage();
                            Toast.makeText(getApplicationContext(), a, Toast.LENGTH_SHORT).show();

                            finish();
                        }else{
                            Toast.makeText(getApplicationContext(), "charge返回失败", Toast.LENGTH_SHORT).show();

                            finish();
                        }




                    }


                });

    }

    public void PaymentTaskByOrder () {

        if(!bHaveAddress()){
            return;
        }
        Toast.makeText(this, "正在获取后端charge数据，请稍后", Toast.LENGTH_SHORT).show();
        showProgress("正在获取后端charge数据，请等待");
        //按键点击之后的禁用，防止重复点击
        mButton.setOnClickListener(null);
        /*
        mDefautAdress.is_default=1;
        mDefautAdress.address="ggyuggfdd";
        mDefautAdress.consignee="fghyff";
        mDefautAdress.area="甘肃省酒泉市肃北蒙古族自治县";
        mDefautAdress.mobile="18620519838";
        */
        SendPayByOrderData mSendPayByOrderData= new SendPayByOrderData(mGoodsOrderInfo.order_id,mGoodsOrderInfo.order_sn,mGoodsOrderInfo.total_price,payType);
        ShopServer.getPayByOrdercharge(mSendPayByOrderData,
                new XLTResponseCallback<JSONObject>() {


                    @Override
                    public void onResponse(JSONObject data, XLTError error) {

                        // TODO Auto-generated method stub
                        hideProgress();
                        if (data != null) {

                            try {
                                orderid = data.getString("orderid");

                                pay(data.getString("charge"));
                            } catch (JSONException e) {
                                // TODO Auto-generated catch block

                                e.printStackTrace();
                            }
                        } else {
                            Toast.makeText(getApplicationContext(), "charge返回失败", Toast.LENGTH_SHORT).show();

                            finish();
                        }

                    }


                });

    }
    @Override
    public void onClick(View v) {
        Intent intent = new Intent();
        switch (v.getId()) {
            case R.id.shopping_buy:
                if(bOrderSn){
                    PaymentTaskByOrder();
                }else {
                    PaymentTask();
                }
                break;
            case R.id.address_LinearLayout:
                intent.setClass(ConfirmOrderActivity.this, SelectAddressActivity.class);
                Bundle bundle = new Bundle();
                bundle.putSerializable("mDefautAdress", mDefautAdress);
                intent.putExtras(bundle);
                startActivityForResult(intent, REQUEST_CODE_SELECT_ADDRESS);
                break;

        }
    }

    private void pay(String dataStringcharge){
        Toast.makeText(this, "正在调用支付接口，请等待", Toast.LENGTH_SHORT).show();

        String packageName = getPackageName();
        Intent intent=new Intent();
        ComponentName componentName = new ComponentName(packageName, packageName + ".wxapi.WXPayEntryActivity");
        intent.setComponent(componentName);
        intent.putExtra(PaymentActivity.EXTRA_CHARGE, dataStringcharge);
        startActivityForResult(intent, REQUEST_CODE_PAYMENT_PAY);
    }
    /////// 发送订单
    public void SendOrderInfo(String sOrder, int iResult, String sResult) {
        Toast.makeText(this, "正在发送订单更新", Toast.LENGTH_SHORT).show();
        ShopServer.getUpdateOrder(new SendUpdateOrderData(sOrder, iResult, sResult),
                new XLTResponseCallback<Object>() {

                    @Override
                    public void onResponse(Object data, XLTError error) {

                        if ((error == null)&& (data != null)){

                            Toast.makeText(getApplicationContext(), "支付接口更新已经返回", Toast.LENGTH_SHORT).show();

                        }



                    }
                });
    }
    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {

        if (requestCode == REQUEST_CODE_PAYMENT_PAY) {
            Toast.makeText(this, "支付接口已经返回", Toast.LENGTH_SHORT).show();
            if (resultCode == Activity.RESULT_OK) {

                setResult(RESULT_OK, data);
                String result = data.getExtras().getString("pay_result");
                Log.d("wuxiaoxiang",result);
                mPayOkShowData.bPayOk=false;

				/*
				 * 处理返回值 "success" - payment succeed "fail" - payment failed
				 * "cancel" - user canceld "invalid" - payment plugin not
				 * installed
				 */
                if (result.equals("success")) {
                    SendOrderInfo(orderid, 1, "success");
                    mPayOkShowData.bPayOk=true;
                    PayOrderOkActivity.startPayOrderOkActivity(this, mPayOkShowData);
                    EventBus.getDefault().post(new PayCommentEvent(true));
                } else if (result.equals("fail")) {
                    SendOrderInfo(orderid, 4, "fail");
                    PayOrderOkActivity.startPayOrderOkActivity(this, mPayOkShowData);
                    Toast.makeText(getApplicationContext(), "支付失败，请进入订单再次支付或返回首页", Toast.LENGTH_SHORT).show();
                    EventBus.getDefault().post(new PayCommentEvent(false));
                } else if (result.equals("cancel")) {
                    SendOrderInfo(orderid, 5, "cancel");
                    PayOrderOkActivity.startPayOrderOkActivity(this, mPayOkShowData);
                    Toast.makeText(getApplicationContext(), "您已经取消支付，请进入订单再次支付或返回首页", Toast.LENGTH_SHORT).show();
                    EventBus.getDefault().post(new PayCommentEvent(false));
                } else if (result.equals("invalid")) {
                    SendOrderInfo(orderid, 5, "cancel");
                    PayOrderOkActivity.startPayOrderOkActivity(this, mPayOkShowData);
                    Toast.makeText(getApplicationContext(), "您没有安装微信或者支付宝", Toast.LENGTH_SHORT).show();
                    EventBus.getDefault().post(new PayCommentEvent(false));
                }

                String errorMsg = data.getExtras().getString("error_msg"); // 错误信息

               finish();

            }
        }

        if (requestCode == REQUEST_CODE_SELECT_ADDRESS) {

            if (resultCode == Activity.RESULT_OK) {

                setResult(RESULT_OK, data);
                mDefautAdress = (AdressInfo) data.getExtras().getSerializable("mSelected");
                addressName.setText(mDefautAdress.consignee);
                addressNumber.setText(mDefautAdress.mobile);
                addressDetail.setText(mDefautAdress.area + mDefautAdress.address);
                mPayOkShowData.consignee=mDefautAdress.consignee;
                mPayOkShowData.mobile=mDefautAdress.mobile;
                mPayOkShowData.area=mDefautAdress.area;
                mPayOkShowData.address=mDefautAdress.address;
            }
        }
        if (requestCode == REQUEST_CODE_ADD_ADDRESS) {

            if (resultCode == Activity.RESULT_OK) {

                setResult(RESULT_OK, data);
                mDefautAdress = (AdressInfo) data.getExtras().getSerializable("mSelected");
                addressName.setText(mDefautAdress.consignee);
                addressNumber.setText(mDefautAdress.mobile);
                addressDetail.setText(mDefautAdress.area+mDefautAdress.address);
                mPayOkShowData.consignee=mDefautAdress.consignee;
                mPayOkShowData.mobile=mDefautAdress.mobile;
                mPayOkShowData.area=mDefautAdress.area;
                mPayOkShowData.address=mDefautAdress.address;
            }
            if(resultCode == Activity.RESULT_CANCELED){
                getShowAdressList();
            }
        }


        // Log.d("wuxiaoxiang", "onActivityResult payledouactivity end");
    }

}
